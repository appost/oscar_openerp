# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#     * Rearrange models' order
#     * Make sure each model has one field with primary_key=True
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [appname]'
# into your database.

from django.db import models

namerror = False

try:
class IrActWindow(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64, blank=True)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True)
    view = models.ForeignKey(IrUiView, null=True, blank=True)
    res_model = models.CharField(max_length=64)
    view_type = models.CharField(max_length=16)
    domain = models.CharField(max_length=250, blank=True)
    create_uid = models.IntegerField(null=True, blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.IntegerField(null=True, blank=True)
    help = models.TextField(blank=True)
    search_view = models.ForeignKey(IrUiView, null=True, blank=True)
    auto_refresh = models.IntegerField(null=True, blank=True)
    view_mode = models.CharField(max_length=250)
    multi = models.BooleanField(null=True, blank=True)
    context = models.CharField(max_length=250)
    target = models.CharField(max_length=-1, blank=True)
    auto_search = models.BooleanField(null=True, blank=True)
    filter = models.BooleanField(null=True, blank=True)
    src_model = models.CharField(max_length=64, blank=True)
    limit = models.IntegerField(null=True, blank=True)
    res_id = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'ir_act_window'

class IrUiView(models.Model):
    id = models.IntegerField(primary_key=True)
    model = models.CharField(max_length=64)
    type = models.CharField(max_length=64)
    arch = models.TextField()
    field_parent = models.CharField(max_length=64, blank=True)
    priority = models.IntegerField()
    create_uid = models.IntegerField(null=True, blank=True)
    create_date = models.ForeignKey(ResUsers, null=True, db_column='create_date', blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.IntegerField(null=True, blank=True)
    inherit = models.ForeignKey(ResUsers, null=True, blank=True)
    name = models.ForeignKey('self', null=True, db_column='name', blank=True)
    class Meta:
        db_table = u'ir_ui_view'

class IrActUrl(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64, blank=True)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True)
    url = models.TextField()
    target = models.CharField(max_length=64)
    create_uid = models.IntegerField(null=True, blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.IntegerField(null=True, blank=True)
    help = models.TextField(blank=True)
    class Meta:
        db_table = u'ir_act_url'

class IrActWizard(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True)
    wiz_name = models.CharField(max_length=64)
    create_uid = models.IntegerField(null=True, blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.IntegerField(null=True, blank=True)
    help = models.TextField(blank=True)
    multi = models.BooleanField(null=True, blank=True)
    model = models.CharField(max_length=64, blank=True)
    class Meta:
        db_table = u'ir_act_wizard'

class IrActClient(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True)
    create_uid = models.IntegerField(null=True, blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.IntegerField(null=True, blank=True)
    help = models.TextField(blank=True)
    res_model = models.CharField(max_length=64, blank=True)
    params_store = models.TextField(blank=True) # This field type is a guess.
    tag = models.CharField(max_length=64)
    context = models.CharField(max_length=250)
    class Meta:
        db_table = u'ir_act_client'

class SaleReceiptReport(models.Model):
    id = models.IntegerField(null=True, blank=True)
    date = models.DateField(null=True, blank=True)
    year = models.TextField(blank=True)
    month = models.TextField(blank=True)
    day = models.TextField(blank=True)
    partner_id = models.IntegerField(null=True, blank=True)
    currency_id = models.IntegerField(null=True, blank=True)
    journal_id = models.IntegerField(null=True, blank=True)
    user_id = models.IntegerField(null=True, blank=True)
    company_id = models.IntegerField(null=True, blank=True)
    nbr = models.BigIntegerField(null=True, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    state = models.CharField(max_length=32, blank=True)
    pay_now = models.CharField(max_length=-1, blank=True)
    date_due = models.DateField(null=True, blank=True)
    account_id = models.IntegerField(null=True, blank=True)
    price_total = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    price_total_tax = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    delay_to_pay = models.FloatField(null=True, blank=True)
    due_delay = models.FloatField(null=True, blank=True)
    class Meta:
        db_table = u'sale_receipt_report'

class IrActions(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    help = models.TextField(blank=True)
    class Meta:
        db_table = u'ir_actions'

class IrActReportCustom(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True)
    report_id = models.IntegerField(null=True, blank=True)
    create_uid = models.IntegerField(null=True, blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.IntegerField(null=True, blank=True)
    help = models.TextField(blank=True)
    class Meta:
        db_table = u'ir_act_report_custom'

class IrActReportXml(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True)
    model = models.CharField(max_length=64)
    report_name = models.CharField(max_length=64)
    report_xsl = models.CharField(max_length=256, blank=True)
    report_xml = models.CharField(max_length=256, blank=True)
    auto = models.BooleanField(null=True, blank=True)
    create_uid = models.IntegerField(null=True, blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.IntegerField(null=True, blank=True)
    help = models.TextField(blank=True)
    report_rml_content_data = models.TextField(blank=True) # This field type is a guess.
    header = models.BooleanField(null=True, blank=True)
    report_type = models.CharField(max_length=32)
    report_file = models.CharField(max_length=256, blank=True)
    multi = models.BooleanField(null=True, blank=True)
    report_rml = models.CharField(max_length=256, blank=True)
    attachment = models.CharField(max_length=128, blank=True)
    report_sxw_content_data = models.TextField(blank=True) # This field type is a guess.
    attachment_use = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'ir_act_report_xml'

class MailComposeMessageIrAttachmentsRel(models.Model):
    wizard = models.ForeignKey(MailComposeMessage)
    attachment = models.ForeignKey(IrAttachment)
    class Meta:
        db_table = u'mail_compose_message_ir_attachments_rel'

class MailComposeMessage(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    body = models.TextField(blank=True)
    model = models.CharField(max_length=128, blank=True)
    record_name = models.CharField(max_length=-1, blank=True)
    date = models.DateTimeField(null=True, blank=True)
    subject = models.CharField(max_length=-1, blank=True)
    composition_mode = models.CharField(max_length=-1, blank=True)
    message_id = models.CharField(max_length=-1, blank=True)
    parent = models.ForeignKey(MailMessage, null=True, blank=True)
    res_id = models.IntegerField(null=True, blank=True)
    subtype = models.ForeignKey(MailMessageSubtype, null=True, blank=True)
    filter = models.ForeignKey(IrFilters, null=True, blank=True)
    author = models.ForeignKey(ResPartner, null=True, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    email_from = models.CharField(max_length=-1, blank=True)
    template_id = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'mail_compose_message'

class AccountStatementFromInvoiceLines(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'account_statement_from_invoice_lines'

class ResGroupsUsersRel(models.Model):
    uid = models.ForeignKey(ResUsers, db_column='uid')
    gid = models.ForeignKey(ResGroups, db_column='gid')
    class Meta:
        db_table = u'res_groups_users_rel'

class MessageAttachmentRel(models.Model):
    message = models.ForeignKey(MailMessage)
    attachment = models.ForeignKey(IrAttachment)
    class Meta:
        db_table = u'message_attachment_rel'

class MailGroup(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    menu = models.ForeignKey(IrUiMenu)
    image_medium = models.TextField(blank=True) # This field type is a guess.
    name = models.CharField(max_length=64)
    alias = models.ForeignKey(MailAlias)
    image = models.TextField(blank=True) # This field type is a guess.
    image_small = models.TextField(blank=True) # This field type is a guess.
    group_public = models.ForeignKey(ResGroups, null=True, blank=True)
    public = models.CharField(max_length=-1)
    description = models.TextField(blank=True)
    class Meta:
        db_table = u'mail_group'

class MailMessageResPartnerRel(models.Model):
    mail_message = models.ForeignKey(MailMessage)
    res_partner = models.ForeignKey(ResPartner)
    class Meta:
        db_table = u'mail_message_res_partner_rel'

class MailGroupResGroupRel(models.Model):
    mail_group = models.ForeignKey(MailGroup)
    groups = models.ForeignKey(ResGroups)
    class Meta:
        db_table = u'mail_group_res_group_rel'

class IrUiMenu(models.Model):
    id = models.IntegerField(primary_key=True)
    parent = models.ForeignKey('self', null=True, blank=True)
    name = models.CharField(max_length=64)
    icon = models.CharField(max_length=64, blank=True)
    parent_left = models.IntegerField(null=True, blank=True)
    parent_right = models.IntegerField(null=True, blank=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    web_icon_data = models.TextField(blank=True) # This field type is a guess.
    sequence = models.IntegerField(null=True, blank=True)
    web_icon_hover = models.CharField(max_length=128, blank=True)
    web_icon_hover_data = models.TextField(blank=True) # This field type is a guess.
    needaction_enabled = models.BooleanField(null=True, blank=True)
    web_icon = models.CharField(max_length=128, blank=True)
    mail_group = models.ForeignKey(MailGroup, null=True, blank=True)
    class Meta:
        db_table = u'ir_ui_menu'

class MailWizardInviteResPartnerRel(models.Model):
    mail_wizard_invite = models.ForeignKey(MailWizardInvite)
    res_partner = models.ForeignKey(ResPartner)
    class Meta:
        db_table = u'mail_wizard_invite_res_partner_rel'

class IrMailServer(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64)
    sequence = models.IntegerField(null=True, blank=True)
    smtp_port = models.IntegerField()
    smtp_host = models.CharField(max_length=128)
    smtp_user = models.CharField(max_length=64, blank=True)
    smtp_pass = models.CharField(max_length=64, blank=True)
    smtp_debug = models.BooleanField(null=True, blank=True)
    active = models.BooleanField(null=True, blank=True)
    smtp_encryption = models.CharField(max_length=-1)
    class Meta:
        db_table = u'ir_mail_server'

class MailMail(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    mail_message = models.ForeignKey(MailMessage)
    notification = models.BooleanField(null=True, blank=True)
    auto_delete = models.BooleanField(null=True, blank=True)
    body_html = models.TextField(blank=True)
    mail_server = models.ForeignKey(IrMailServer, null=True, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    references = models.TextField(blank=True)
    email_cc = models.CharField(max_length=-1, blank=True)
    reply_to = models.CharField(max_length=-1, blank=True)
    email_to = models.TextField(blank=True)
    email_from = models.CharField(max_length=-1, blank=True)
    fetchmail_server = models.ForeignKey(FetchmailServer, null=True, blank=True)
    class Meta:
        db_table = u'mail_mail'

class WkfTransition(models.Model):
    id = models.IntegerField(primary_key=True)
    act_from = models.ForeignKey(WkfActivity, db_column='act_from')
    act_to = models.ForeignKey(WkfActivity, db_column='act_to')
    condition = models.CharField(max_length=128)
    trigger_type = models.CharField(max_length=128, blank=True)
    trigger_expr_id = models.CharField(max_length=128, blank=True)
    signal = models.CharField(max_length=64, blank=True)
    group = models.ForeignKey(ResGroups, null=True, blank=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    trigger_model = models.CharField(max_length=128, blank=True)
    class Meta:
        db_table = u'wkf_transition'

class SaleConfigSettings(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    module_sale = models.BooleanField(null=True, blank=True)
    module_plugin_outlook = models.BooleanField(null=True, blank=True)
    module_web_linkedin = models.BooleanField(null=True, blank=True)
    module_plugin_thunderbird = models.BooleanField(null=True, blank=True)
    module_crm = models.BooleanField(null=True, blank=True)
    module_crm_helpdesk = models.BooleanField(null=True, blank=True)
    group_fund_raising = models.BooleanField(null=True, blank=True)
    fetchmail_lead = models.BooleanField(null=True, blank=True)
    module_crm_claim = models.BooleanField(null=True, blank=True)
    group_sale_pricelist = models.BooleanField(null=True, blank=True)
    group_discount_per_so_line = models.BooleanField(null=True, blank=True)
    timesheet = models.BooleanField(null=True, blank=True)
    group_invoice_so_lines = models.BooleanField(null=True, blank=True)
    module_sale_stock = models.BooleanField(null=True, blank=True)
    time_unit = models.ForeignKey(ProductUom, null=True, db_column='time_unit', blank=True)
    module_account_analytic_analysis = models.BooleanField(null=True, blank=True)
    group_uom = models.BooleanField(null=True, blank=True)
    module_project = models.BooleanField(null=True, blank=True)
    module_analytic_user_function = models.BooleanField(null=True, blank=True)
    module_sale_journal = models.BooleanField(null=True, blank=True)
    module_warning = models.BooleanField(null=True, blank=True)
    module_sale_margin = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'sale_config_settings'

class BaseSetupTerminology(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    partner = models.CharField(max_length=-1)
    class Meta:
        db_table = u'base_setup_terminology'

class Wkf(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    osv = models.CharField(max_length=64)
    on_create = models.BooleanField(null=True, blank=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'wkf'

class BoardCreate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64)
    menu_parent = models.ForeignKey(IrUiMenu)
    class Meta:
        db_table = u'board_create'

class WkfInstance(models.Model):
    id = models.IntegerField(primary_key=True)
    wkf = models.ForeignKey(Wkf, null=True, blank=True)
    uid = models.IntegerField(null=True, blank=True)
    res_id = models.IntegerField(null=True, blank=True)
    res_type = models.CharField(max_length=64, blank=True)
    state = models.CharField(max_length=32, blank=True)
    class Meta:
        db_table = u'wkf_instance'

class WkfWorkitem(models.Model):
    id = models.IntegerField(primary_key=True)
    act = models.ForeignKey(WkfActivity)
    inst = models.ForeignKey(WkfInstance)
    subflow = models.ForeignKey(WkfInstance, null=True, blank=True)
    state = models.CharField(max_length=64, blank=True)
    class Meta:
        db_table = u'wkf_workitem'

class WkfWitmTrans(models.Model):
    trans = models.ForeignKey(WkfTransition)
    inst = models.ForeignKey(WkfInstance)
    class Meta:
        db_table = u'wkf_witm_trans'

class ResGroups(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    comment = models.TextField(blank=True)
    category = models.ForeignKey(IrModuleCategory, null=True, blank=True)
    share = models.BooleanField(null=True, blank=True)
    is_portal = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'res_groups'

class BaseConfigSettings(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    module_portal = models.BooleanField(null=True, blank=True)
    module_base_import = models.BooleanField(null=True, blank=True)
    module_share = models.BooleanField(null=True, blank=True)
    module_auth_oauth = models.BooleanField(null=True, blank=True)
    module_portal_anonymous = models.BooleanField(null=True, blank=True)
    module_multi_company = models.BooleanField(null=True, blank=True)
    alias_domain = models.CharField(max_length=-1, blank=True)
    auth_signup_uninvited = models.BooleanField(null=True, blank=True)
    auth_signup_reset_password = models.BooleanField(null=True, blank=True)
    auth_signup_template_user = models.ForeignKey(ResUsers, null=True, blank=True)
    class Meta:
        db_table = u'base_config_settings'

class ResourceCalendarLeaves(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64, blank=True)
    resource = models.ForeignKey(ResourceResource, null=True, blank=True)
    calendar = models.ForeignKey(ResourceCalendar, null=True, blank=True)
    date_from = models.DateTimeField()
    date_to = models.DateTimeField()
    company_id = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'resource_calendar_leaves'

class ResourceCalendarAttendance(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    dayofweek = models.CharField(max_length=-1)
    hour_from = models.FloatField()
    name = models.CharField(max_length=64)
    calendar = models.ForeignKey(ResourceCalendar)
    date_from = models.DateField(null=True, blank=True)
    hour_to = models.FloatField()
    class Meta:
        db_table = u'resource_calendar_attendance'

class WkfLogs(models.Model):
    id = models.IntegerField(primary_key=True)
    res_type = models.CharField(max_length=128)
    res_id = models.IntegerField()
    uid = models.ForeignKey(ResUsers, null=True, db_column='uid', blank=True)
    act = models.ForeignKey(WkfActivity, null=True, blank=True)
    time = models.TimeField()
    info = models.CharField(max_length=128, blank=True)
    class Meta:
        db_table = u'wkf_logs'

class ResourceCalendar(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    manager = models.ForeignKey(ResUsers, null=True, db_column='manager', blank=True)
    name = models.CharField(max_length=64)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    class Meta:
        db_table = u'resource_calendar'

class ResourceResource(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    time_efficiency = models.FloatField()
    code = models.CharField(max_length=16, blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    name = models.CharField(max_length=64)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    active = models.BooleanField(null=True, blank=True)
    calendar = models.ForeignKey(ResourceCalendar, null=True, blank=True)
    resource_type = models.CharField(max_length=-1)
    class Meta:
        db_table = u'resource_resource'

class WkfActivity(models.Model):
    id = models.IntegerField(primary_key=True)
    wkf = models.ForeignKey(Wkf)
    subflow = models.ForeignKey(Wkf, null=True, blank=True)
    split_mode = models.CharField(max_length=3)
    join_mode = models.CharField(max_length=3)
    kind = models.CharField(max_length=16)
    name = models.CharField(max_length=64)
    signal_send = models.CharField(max_length=32, blank=True)
    flow_start = models.BooleanField(null=True, blank=True)
    flow_stop = models.BooleanField(null=True, blank=True)
    action = models.TextField(blank=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    action = models.ForeignKey(IrActServer, null=True, blank=True)
    class Meta:
        db_table = u'wkf_activity'

class MailNotification(models.Model):
    id = models.IntegerField(primary_key=True)
    read = models.BooleanField(null=True, blank=True)
    starred = models.BooleanField(null=True, blank=True)
    partner = models.ForeignKey(ResPartner)
    message = models.ForeignKey(MailMessage)
    class Meta:
        db_table = u'mail_notification'

class IrModuleCategory(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    parent = models.ForeignKey('self', null=True, blank=True)
    name = models.CharField(max_length=128)
    sequence = models.IntegerField(null=True, blank=True)
    visible = models.BooleanField(null=True, blank=True)
    description = models.TextField(blank=True)
    class Meta:
        db_table = u'ir_module_category'

class IrModuleModuleDependency(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=128, blank=True)
    version_pattern = models.CharField(max_length=128, blank=True)
    module = models.ForeignKey(IrModuleModule, null=True, blank=True)
    class Meta:
        db_table = u'ir_module_module_dependency'

class IrModelConstraint(models.Model):
    id = models.IntegerField()
    create_uid = models.IntegerField(null=True, blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.IntegerField(null=True, blank=True)
    date_init = models.DateTimeField(null=True, blank=True)
    date_update = models.DateTimeField(null=True, blank=True)
    module = models.ForeignKey(IrModuleModule, db_column='module')
    model = models.ForeignKey(IrModel, db_column='model')
    type = models.CharField(max_length=1)
    name = models.CharField(max_length=128)
    class Meta:
        db_table = u'ir_model_constraint'

class ResLang(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64, unique=True)
    code = models.CharField(max_length=16, unique=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    date_format = models.CharField(max_length=64)
    direction = models.CharField(max_length=-1)
    thousands_sep = models.CharField(max_length=64, blank=True)
    translatable = models.BooleanField(null=True, blank=True)
    time_format = models.CharField(max_length=64)
    decimal_point = models.CharField(max_length=64)
    active = models.BooleanField(null=True, blank=True)
    iso_code = models.CharField(max_length=16, blank=True)
    grouping = models.CharField(max_length=64)
    class Meta:
        db_table = u'res_lang'

class AccountVoucher(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    comment = models.CharField(max_length=64)
    date_due = models.DateField(null=True, blank=True)
    is_multi_currency = models.BooleanField(null=True, blank=True)
    reference = models.CharField(max_length=64, blank=True)
    number = models.CharField(max_length=32, blank=True)
    writeoff_acc = models.ForeignKey(AccountAccount, null=True, blank=True)
    date = models.DateField(null=True, blank=True)
    narration = models.TextField(blank=True)
    partner = models.ForeignKey(ResPartner, null=True, blank=True)
    payment_rate_currency = models.ForeignKey(ResCurrency)
    pay_now = models.CharField(max_length=-1, blank=True)
    company = models.ForeignKey(ResCompany)
    state = models.CharField(max_length=32, blank=True)
    pre_line = models.BooleanField(null=True, blank=True)
    payment_rate = models.DecimalField(max_digits=65535, decimal_places=65535)
    type = models.CharField(max_length=-1, blank=True)
    payment_option = models.CharField(max_length=-1)
    account = models.ForeignKey(AccountAccount)
    period = models.ForeignKey(AccountPeriod)
    active = models.BooleanField(null=True, blank=True)
    move = models.ForeignKey(AccountMove, null=True, blank=True)
    tax = models.ForeignKey(AccountTax, null=True, blank=True)
    tax_amount = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    name = models.CharField(max_length=256, blank=True)
    analytic = models.ForeignKey(AccountAnalyticAccount, null=True, blank=True)
    journal = models.ForeignKey(AccountJournal)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535)
    class Meta:
        db_table = u'account_voucher'

class ResCompany(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=128, unique=True)
    parent = models.ForeignKey('self', null=True, blank=True)
    partner = models.ForeignKey(ResPartner)
    currency = models.ForeignKey(ResCurrency)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    rml_footer = models.TextField(blank=True)
    rml_header = models.TextField()
    paper_format = models.CharField(max_length=-1)
    logo_web = models.TextField(blank=True) # This field type is a guess.
    rml_header2 = models.TextField()
    rml_header3 = models.TextField()
    rml_header1 = models.CharField(max_length=200, blank=True)
    account_no = models.CharField(max_length=64, blank=True)
    company_registry = models.CharField(max_length=64, blank=True)
    custom_footer = models.BooleanField(null=True, blank=True)
    expects_chart_of_accounts = models.BooleanField(null=True, blank=True)
    paypal_account = models.CharField(max_length=128, blank=True)
    overdue_msg = models.TextField(blank=True)
    tax_calculation_rounding_method = models.CharField(max_length=-1, blank=True)
    expense_currency_exchange_account = models.ForeignKey(AccountAccount, null=True, blank=True)
    income_currency_exchange_account = models.ForeignKey(AccountAccount, null=True, blank=True)
    vat_check_vies = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'res_company'

class ResCurrency(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=32)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    rounding = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    symbol = models.CharField(max_length=4, blank=True)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    date = models.DateField(null=True, blank=True)
    base = models.BooleanField(null=True, blank=True)
    active = models.BooleanField(null=True, blank=True)
    position = models.CharField(max_length=-1, blank=True)
    accuracy = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'res_currency'

class IrModelData(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.IntegerField(null=True, blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.IntegerField(null=True, blank=True)
    noupdate = models.BooleanField(null=True, blank=True)
    name = models.CharField(max_length=128)
    date_init = models.DateTimeField(null=True, blank=True)
    date_update = models.DateTimeField(null=True, blank=True)
    module = models.CharField(max_length=64)
    model = models.CharField(max_length=64)
    res_id = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'ir_model_data'

class IrModuleModule(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    website = models.CharField(max_length=256, blank=True)
    summary = models.CharField(max_length=256, blank=True)
    name = models.CharField(max_length=128, unique=True)
    author = models.CharField(max_length=128, blank=True)
    url = models.CharField(max_length=128, blank=True)
    state = models.CharField(max_length=16, blank=True)
    latest_version = models.CharField(max_length=64, blank=True)
    shortdesc = models.CharField(max_length=256, blank=True)
    complexity = models.CharField(max_length=32, blank=True)
    category_id = models.IntegerField(null=True, blank=True)
    description = models.ForeignKey(IrModuleCategory, null=True, db_column='description', blank=True)
    application = models.BooleanField(null=True, blank=True)
    demo = models.BooleanField(null=True, blank=True)
    web = models.BooleanField(null=True, blank=True)
    license = models.CharField(max_length=32, blank=True)
    sequence = models.IntegerField(null=True, blank=True)
    auto_install = models.BooleanField(null=True, blank=True)
    menus_by_module = models.TextField(blank=True)
    maintainer = models.CharField(max_length=128, blank=True)
    contributors = models.TextField(blank=True)
    views_by_module = models.TextField(blank=True)
    icon = models.CharField(max_length=128, blank=True)
    reports_by_module = models.TextField(blank=True)
    published_version = models.CharField(max_length=64, blank=True)
    class Meta:
        db_table = u'ir_module_module'

class IrSequenceType(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    code = models.CharField(max_length=32, unique=True)
    name = models.CharField(max_length=64)
    class Meta:
        db_table = u'ir_sequence_type'

class AccountVoucherLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    reconcile = models.BooleanField(null=True, blank=True)
    voucher = models.ForeignKey(AccountVoucher)
    amount_unreconciled = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    account = models.ForeignKey(AccountAccount)
    name = models.CharField(max_length=256, blank=True)
    move_line = models.ForeignKey(AccountMoveLine, null=True, blank=True)
    untax_amount = models.FloatField(null=True, blank=True)
    company_id = models.IntegerField(null=True, blank=True)
    amount_original = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    amount = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    account_analytic = models.ForeignKey(AccountAnalyticAccount, null=True, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    class Meta:
        db_table = u'account_voucher_line'

class IrSequence(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    code = models.CharField(max_length=64, blank=True)
    suffix = models.CharField(max_length=64, blank=True)
    number_next = models.IntegerField()
    number_increment = models.IntegerField()
    implementation = models.CharField(max_length=-1)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    padding = models.IntegerField()
    active = models.BooleanField(null=True, blank=True)
    prefix = models.CharField(max_length=64, blank=True)
    name = models.CharField(max_length=64)
    class Meta:
        db_table = u'ir_sequence'

class IrUiMenuGroupRel(models.Model):
    menu = models.ForeignKey(IrUiMenu)
    gid = models.ForeignKey(ResGroups, db_column='gid')
    class Meta:
        db_table = u'ir_ui_menu_group_rel'

class AccountMoveLineRelation(models.Model):
    move = models.ForeignKey(AccountStatementFromInvoiceLines)
    line = models.ForeignKey(AccountMoveLine)
    class Meta:
        db_table = u'account_move_line_relation'

class IrUiViewSc(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    user = models.ForeignKey(ResUsers)
    res_id = models.IntegerField(null=True, blank=True)
    resource = models.CharField(max_length=64)
    name = models.CharField(max_length=64, blank=True)
    sequence = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'ir_ui_view_sc'

class IrActWindowGroupRel(models.Model):
    act = models.ForeignKey(IrActWindow)
    gid = models.ForeignKey(ResGroups, db_column='gid')
    class Meta:
        db_table = u'ir_act_window_group_rel'

class IrCron(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    function = models.CharField(max_length=64, blank=True)
    interval_type = models.CharField(max_length=-1, blank=True)
    user = models.ForeignKey(ResUsers)
    name = models.CharField(max_length=60)
    args = models.TextField(blank=True)
    numbercall = models.IntegerField(null=True, blank=True)
    nextcall = models.DateTimeField()
    priority = models.IntegerField(null=True, blank=True)
    doall = models.BooleanField(null=True, blank=True)
    active = models.BooleanField(null=True, blank=True)
    interval_number = models.IntegerField(null=True, blank=True)
    model = models.CharField(max_length=64, blank=True)
    class Meta:
        db_table = u'ir_cron'

class IrActionsTodo(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    note = models.TextField(blank=True)
    state = models.CharField(max_length=-1)
    name = models.CharField(max_length=64, blank=True)
    sequence = models.IntegerField(null=True, blank=True)
    type = models.CharField(max_length=-1)
    action_id = models.IntegerField()
    class Meta:
        db_table = u'ir_actions_todo'

class RelServerActions(models.Model):
    server = models.ForeignKey(IrActServer)
    action = models.ForeignKey(IrActServer)
    class Meta:
        db_table = u'rel_server_actions'

class ResGroupsWizardRel(models.Model):
    uid = models.ForeignKey(IrActWizard, db_column='uid')
    gid = models.ForeignKey(ResGroups, db_column='gid')
    class Meta:
        db_table = u'res_groups_wizard_rel'

class IrServerObjectLines(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    server = models.ForeignKey(IrActServer, null=True, blank=True)
    type = models.CharField(max_length=32)
    value = models.TextField()
    col1 = models.ForeignKey(IrModelFields, db_column='col1')
    class Meta:
        db_table = u'ir_server_object_lines'

class IrTranslation(models.Model):
    id = models.IntegerField(primary_key=True)
    lang = models.ForeignKey(ResLang, null=True, db_column='lang', blank=True)
    src = models.TextField(blank=True)
    name = models.CharField(max_length=-1)
    res_id = models.IntegerField(null=True, blank=True)
    module = models.CharField(max_length=-1, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    value = models.TextField(blank=True)
    type = models.CharField(max_length=-1, blank=True)
    comments = models.TextField(blank=True)
    class Meta:
        db_table = u'ir_translation'

class IrExports(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    resource = models.CharField(max_length=128, blank=True)
    name = models.CharField(max_length=128, blank=True)
    class Meta:
        db_table = u'ir_exports'

class WkfTriggers(models.Model):
    id = models.IntegerField(primary_key=True)
    instance = models.ForeignKey(WkfInstance, null=True, blank=True)
    workitem = models.ForeignKey(WkfWorkitem)
    model = models.CharField(max_length=128, blank=True)
    res_id = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'wkf_triggers'

class IrConfigParameter(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    key = models.CharField(max_length=256)
    value = models.TextField()
    class Meta:
        db_table = u'ir_config_parameter'

class IrFieldsConverter(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'ir_fields_converter'

class OsvMemoryAutovacuum(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'osv_memory_autovacuum'

class BaseModuleImport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    module_name = models.CharField(max_length=128, blank=True)
    module_file = models.TextField() # This field type is a guess.
    state = models.CharField(max_length=-1, blank=True)
    class Meta:
        db_table = u'base_module_import'

class WizardIrModelMenuCreate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    menu = models.ForeignKey(IrUiMenu)
    name = models.CharField(max_length=64)
    class Meta:
        db_table = u'wizard_ir_model_menu_create'

class BaseLanguageImport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    code = models.CharField(max_length=5)
    data = models.TextField() # This field type is a guess.
    name = models.CharField(max_length=64)
    overwrite = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'base_language_import'

class BaseModuleUpdate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    add = models.IntegerField(null=True, blank=True)
    update = models.IntegerField(null=True, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    class Meta:
        db_table = u'base_module_update'

class BaseModuleUpgrade(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    module_info = models.TextField(blank=True)
    class Meta:
        db_table = u'base_module_upgrade'

class BaseLanguageInstall(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    lang = models.CharField(max_length=-1)
    state = models.CharField(max_length=-1, blank=True)
    overwrite = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'base_language_install'

class BaseModuleConfiguration(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'base_module_configuration'

class BaseUpdateTranslations(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    lang = models.CharField(max_length=-1)
    class Meta:
        db_table = u'base_update_translations'

class ResConfig(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'res_config'

class ResPartnerBankType(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    code = models.CharField(max_length=64)
    name = models.CharField(max_length=64)
    format_layout = models.TextField(blank=True)
    class Meta:
        db_table = u'res_partner_bank_type'

class ResPartnerTitle(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    domain = models.CharField(max_length=24)
    name = models.CharField(max_length=46)
    shortcut = models.CharField(max_length=16, blank=True)
    class Meta:
        db_table = u'res_partner_title'

class ResBank(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    city = models.CharField(max_length=128, blank=True)
    fax = models.CharField(max_length=64, blank=True)
    name = models.CharField(max_length=128)
    zip = models.CharField(max_length=24, blank=True)
    country = models.ForeignKey(ResCountry, null=True, db_column='country', blank=True)
    street2 = models.CharField(max_length=128, blank=True)
    bic = models.CharField(max_length=64, blank=True)
    phone = models.CharField(max_length=64, blank=True)
    state = models.ForeignKey(ResCountryState, null=True, db_column='state', blank=True)
    street = models.CharField(max_length=128, blank=True)
    active = models.BooleanField(null=True, blank=True)
    email = models.CharField(max_length=64, blank=True)
    class Meta:
        db_table = u'res_bank'

class ResConfigInstaller(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'res_config_installer'

class ResPartnerBankTypeField(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    bank_type = models.ForeignKey(ResPartnerBankType)
    readonly = models.BooleanField(null=True, blank=True)
    required = models.BooleanField(null=True, blank=True)
    name = models.CharField(max_length=64)
    size = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'res_partner_bank_type_field'

class IrActionsConfigurationWizard(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    note = models.TextField(blank=True)
    class Meta:
        db_table = u'ir_actions_configuration_wizard'

class ResConfigSettings(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'res_config_settings'

class ResCompanyUsersRel(models.Model):
    cid = models.ForeignKey(ResCompany, db_column='cid')
    user = models.ForeignKey(ResUsers)
    class Meta:
        db_table = u'res_company_users_rel'

class ResCurrencyRateType(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64)
    class Meta:
        db_table = u'res_currency_rate_type'

class ResGroupsImpliedRel(models.Model):
    gid = models.ForeignKey(ResGroups, db_column='gid')
    hid = models.ForeignKey(ResGroups, db_column='hid')
    class Meta:
        db_table = u'res_groups_implied_rel'

class IrActWindowView(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    act_window = models.ForeignKey(IrActWindow, null=True, blank=True)
    multi = models.BooleanField(null=True, blank=True)
    view_mode = models.CharField(max_length=-1)
    view = models.ForeignKey(IrUiView, null=True, blank=True)
    sequence = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'ir_act_window_view'

class ChangePasswordWizard(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'change_password_wizard'

class IrUiViewCustom(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    user = models.ForeignKey(ResUsers)
    arch = models.TextField()
    ref = models.ForeignKey(IrUiView)
    class Meta:
        db_table = u'ir_ui_view_custom'

class IrUiViewGroupRel(models.Model):
    view = models.ForeignKey(IrUiView)
    group = models.ForeignKey(ResGroups)
    class Meta:
        db_table = u'ir_ui_view_group_rel'

class ResRequestLink(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    priority = models.IntegerField(null=True, blank=True)
    object = models.CharField(max_length=64)
    name = models.CharField(max_length=64)
    class Meta:
        db_table = u'res_request_link'

class IrModelRelation(models.Model):
    id = models.IntegerField()
    create_uid = models.IntegerField(null=True, blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.IntegerField(null=True, blank=True)
    date_init = models.DateTimeField(null=True, blank=True)
    date_update = models.DateTimeField(null=True, blank=True)
    module = models.ForeignKey(IrModuleModule, db_column='module')
    model = models.ForeignKey(IrModel, db_column='model')
    name = models.CharField(max_length=128)
    class Meta:
        db_table = u'ir_model_relation'

class ResRequest(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    body = models.TextField(blank=True)
    name = models.CharField(max_length=128)
    date_sent = models.DateTimeField(null=True, blank=True)
    ref_doc2 = models.CharField(max_length=128, blank=True)
    priority = models.CharField(max_length=-1)
    ref_doc1 = models.CharField(max_length=128, blank=True)
    state = models.CharField(max_length=-1)
    act_from = models.ForeignKey(ResUsers, db_column='act_from')
    ref_partner = models.ForeignKey(ResPartner, null=True, blank=True)
    active = models.BooleanField(null=True, blank=True)
    trigger_date = models.DateTimeField(null=True, blank=True)
    act_to = models.ForeignKey(ResUsers, db_column='act_to')
    class Meta:
        db_table = u'res_request'

class IrModelAccess(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    model = models.ForeignKey(IrModel)
    perm_read = models.BooleanField(null=True, blank=True)
    name = models.CharField(max_length=64)
    perm_write = models.BooleanField(null=True, blank=True)
    perm_unlink = models.BooleanField(null=True, blank=True)
    active = models.BooleanField(null=True, blank=True)
    perm_create = models.BooleanField(null=True, blank=True)
    group = models.ForeignKey(ResGroups, null=True, blank=True)
    class Meta:
        db_table = u'ir_model_access'

class IrModelFieldsGroupRel(models.Model):
    field = models.ForeignKey(IrModelFields)
    group = models.ForeignKey(ResGroups)
    class Meta:
        db_table = u'ir_model_fields_group_rel'

class IrDefault(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    uid = models.ForeignKey(ResUsers, null=True, db_column='uid', blank=True)
    ref_table = models.CharField(max_length=64, blank=True)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    value = models.CharField(max_length=64, blank=True)
    ref_id = models.IntegerField(null=True, blank=True)
    field_tbl = models.CharField(max_length=64, blank=True)
    field_name = models.CharField(max_length=64, blank=True)
    page = models.CharField(max_length=64, blank=True)
    class Meta:
        db_table = u'ir_default'

class ResGroupsReportRel(models.Model):
    uid = models.ForeignKey(IrActReportXml, db_column='uid')
    gid = models.ForeignKey(ResGroups, db_column='gid')
    class Meta:
        db_table = u'res_groups_report_rel'

class IrProperty(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    value_text = models.TextField(blank=True)
    value_float = models.FloatField(null=True, blank=True)
    name = models.CharField(max_length=128, blank=True)
    value_integer = models.IntegerField(null=True, blank=True)
    type = models.CharField(max_length=-1)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    fields = models.ForeignKey(IrModelFields)
    value_datetime = models.DateTimeField(null=True, blank=True)
    value_binary = models.TextField(blank=True) # This field type is a guess.
    value_reference = models.CharField(max_length=128, blank=True)
    res_id = models.CharField(max_length=128, blank=True)
    class Meta:
        db_table = u'ir_property'

class ChangePasswordUser(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    user_login = models.CharField(max_length=-1, blank=True)
    user = models.ForeignKey(ResUsers)
    new_passwd = models.CharField(max_length=-1, blank=True)
    wizard = models.ForeignKey(ChangePasswordWizard)
    class Meta:
        db_table = u'change_password_user'

class ResRequestHistory(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    body = models.TextField(blank=True)
    act_from = models.ForeignKey(ResUsers, db_column='act_from')
    name = models.CharField(max_length=128)
    req = models.ForeignKey(ResRequest)
    date_sent = models.DateTimeField()
    act_to = models.ForeignKey(ResUsers, db_column='act_to')
    class Meta:
        db_table = u'res_request_history'

class MailWizardInvite(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    res_model = models.CharField(max_length=128)
    res_id = models.IntegerField(null=True, blank=True)
    message = models.TextField(blank=True)
    class Meta:
        db_table = u'mail_wizard_invite'

class ResGroupsActionRel(models.Model):
    uid = models.ForeignKey(IrActionsTodo, db_column='uid')
    gid = models.ForeignKey(ResGroups, db_column='gid')
    class Meta:
        db_table = u'res_groups_action_rel'

class ResPartnerBank(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    bank_name = models.CharField(max_length=32, blank=True)
    owner_name = models.CharField(max_length=128, blank=True)
    sequence = models.IntegerField(null=True, blank=True)
    street = models.CharField(max_length=128, blank=True)
    partner = models.ForeignKey(ResPartner)
    bank = models.ForeignKey(ResBank, null=True, db_column='bank', blank=True)
    bank_bic = models.CharField(max_length=16, blank=True)
    city = models.CharField(max_length=128, blank=True)
    name = models.CharField(max_length=64, blank=True)
    zip = models.CharField(max_length=24, blank=True)
    footer = models.BooleanField(null=True, blank=True)
    country = models.ForeignKey(ResCountry, null=True, blank=True)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    state = models.CharField(max_length=-1)
    state = models.ForeignKey(ResCountryState, null=True, blank=True)
    acc_number = models.CharField(max_length=64)
    journal = models.ForeignKey(AccountJournal, null=True, blank=True)
    class Meta:
        db_table = u'res_partner_bank'

class IrExportsLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    export = models.ForeignKey(IrExports, null=True, blank=True)
    name = models.CharField(max_length=64, blank=True)
    class Meta:
        db_table = u'ir_exports_line'

class IrValues(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=128)
    key = models.CharField(max_length=128)
    key2 = models.CharField(max_length=256, blank=True)
    model = models.CharField(max_length=128)
    value = models.TextField(blank=True)
    meta = models.TextField(blank=True)
    res_id = models.IntegerField(null=True, blank=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    model = models.ForeignKey(IrModel, null=True, blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    action_id = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'ir_values'

class RuleGroupRel(models.Model):
    rule_group = models.ForeignKey(IrRule)
    group = models.ForeignKey(ResGroups)
    class Meta:
        db_table = u'rule_group_rel'

class ResCurrencyRate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    currency = models.ForeignKey(ResCurrency, null=True, blank=True)
    rate = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    name = models.DateField()
    currency_rate_type = models.ForeignKey(ResCurrencyRateType, null=True, blank=True)
    class Meta:
        db_table = u'res_currency_rate'

class IrRule(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    model = models.ForeignKey(IrModel)
    domain_force = models.TextField(blank=True)
    name = models.CharField(max_length=128, blank=True)
    global_field = models.BooleanField(null=True, db_column='global', blank=True) # Field renamed because it was a Python reserved word.
    active = models.BooleanField(null=True, blank=True)
    perm_unlink = models.BooleanField(null=True, blank=True)
    perm_write = models.BooleanField(null=True, blank=True)
    perm_read = models.BooleanField(null=True, blank=True)
    perm_create = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'ir_rule'

class BaseLanguageExport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    lang = models.CharField(max_length=-1)
    state = models.CharField(max_length=-1, blank=True)
    name = models.CharField(max_length=-1, blank=True)
    format = models.CharField(max_length=-1)
    data = models.TextField(blank=True) # This field type is a guess.
    class Meta:
        db_table = u'base_language_export'

class RelModulesLangexport(models.Model):
    wiz = models.ForeignKey(BaseLanguageExport)
    module = models.ForeignKey(IrModuleModule)
    class Meta:
        db_table = u'rel_modules_langexport'

class ResPartnerResPartnerCategoryRel(models.Model):
    category = models.ForeignKey(ResPartnerCategory)
    partner = models.ForeignKey(ResPartner)
    class Meta:
        db_table = u'res_partner_res_partner_category_rel'

class IrActServer(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True)
    create_uid = models.IntegerField(null=True, blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.IntegerField(null=True, blank=True)
    help = models.TextField(blank=True)
    model = models.ForeignKey(IrModel)
    code = models.TextField(blank=True)
    sequence = models.IntegerField(null=True, blank=True)
    sms = models.CharField(max_length=160, blank=True)
    write_id = models.CharField(max_length=256, blank=True)
    srcmodel = models.ForeignKey(IrModel, null=True, blank=True)
    message = models.TextField(blank=True)
    trigger_name = models.CharField(max_length=128, blank=True)
    condition = models.CharField(max_length=256)
    subject = models.CharField(max_length=1024, blank=True)
    loop_action = models.ForeignKey('self', null=True, db_column='loop_action', blank=True)
    trigger_obj = models.ForeignKey(IrModelFields, null=True, blank=True)
    mobile = models.CharField(max_length=512, blank=True)
    copy_object = models.CharField(max_length=256, blank=True)
    wkf_model = models.ForeignKey(IrModel, null=True, blank=True)
    state = models.CharField(max_length=32)
    record = models.ForeignKey(IrModelFields, null=True, blank=True)
    expression = models.CharField(max_length=512, blank=True)
    email = models.CharField(max_length=512, blank=True)
    action_id = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'ir_act_server'

class MultiCompanyDefault(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=256)
    sequence = models.IntegerField(null=True, blank=True)
    expression = models.CharField(max_length=256)
    company_dest = models.ForeignKey(ResCompany)
    field = models.ForeignKey(IrModelFields, null=True, blank=True)
    company = models.ForeignKey(ResCompany)
    object = models.ForeignKey(IrModel)
    class Meta:
        db_table = u'multi_company_default'

class ResPartnerCategory(models.Model):
    id = models.IntegerField(primary_key=True)
    parent_left = models.IntegerField(null=True, blank=True)
    parent_right = models.IntegerField(null=True, blank=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64)
    parent = models.ForeignKey('self', null=True, blank=True)
    active = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'res_partner_category'

class ProcessTransitionAction(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    action = models.CharField(max_length=64, blank=True)
    state = models.CharField(max_length=-1)
    name = models.CharField(max_length=32)
    transition = models.ForeignKey(ProcessTransition)
    class Meta:
        db_table = u'process_transition_action'

class ResCountryState(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    code = models.CharField(max_length=3)
    country = models.ForeignKey(ResCountry)
    name = models.CharField(max_length=64)
    class Meta:
        db_table = u'res_country_state'

class ProcessCondition(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    model = models.ForeignKey(IrModel, null=True, blank=True)
    node = models.ForeignKey(ProcessNode)
    model_states = models.CharField(max_length=128)
    name = models.CharField(max_length=30)
    class Meta:
        db_table = u'process_condition'

class ProcessProcess(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    active = models.BooleanField(null=True, blank=True)
    model = models.ForeignKey(IrModel, null=True, blank=True)
    note = models.TextField(blank=True)
    name = models.CharField(max_length=30)
    class Meta:
        db_table = u'process_process'

class IrModel(models.Model):
    id = models.IntegerField(primary_key=True)
    model = models.CharField(max_length=64)
    name = models.CharField(max_length=64)
    state = models.CharField(max_length=16, blank=True)
    info = models.TextField(blank=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'ir_model'

class ProcessTransitionGroupRel(models.Model):
    tid = models.ForeignKey(ProcessTransition, db_column='tid')
    rid = models.ForeignKey(ResGroups, db_column='rid')
    class Meta:
        db_table = u'process_transition_group_rel'

class ProcessTransitionIds(models.Model):
    ptr = models.ForeignKey(ProcessTransition)
    wtr = models.ForeignKey(WkfTransition)
    class Meta:
        db_table = u'process_transition_ids'

class ProcessNode(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    menu = models.ForeignKey(IrUiMenu, null=True, blank=True)
    model = models.ForeignKey(IrModel, null=True, blank=True)
    kind = models.CharField(max_length=-1)
    note = models.TextField(blank=True)
    name = models.CharField(max_length=30)
    subflow = models.ForeignKey(ProcessProcess, null=True, blank=True)
    process = models.ForeignKey(ProcessProcess)
    model_states = models.CharField(max_length=128, blank=True)
    help_url = models.CharField(max_length=255, blank=True)
    flow_start = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'process_node'

class ProcessTransition(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    note = models.TextField(blank=True)
    name = models.CharField(max_length=32)
    source_node = models.ForeignKey(ProcessNode)
    target_node = models.ForeignKey(ProcessNode)
    class Meta:
        db_table = u'process_transition'

class MailVote(models.Model):
    message = models.ForeignKey(MailMessage)
    user = models.ForeignKey(ResUsers)
    class Meta:
        db_table = u'mail_vote'

class IrAttachment(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    description = models.TextField(blank=True)
    datas_fname = models.CharField(max_length=256, blank=True)
    url = models.CharField(max_length=1024, blank=True)
    res_model = models.CharField(max_length=64, blank=True)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    res_name = models.CharField(max_length=128, blank=True)
    type = models.CharField(max_length=-1)
    res_id = models.IntegerField(null=True, blank=True)
    file_size = models.IntegerField(null=True, blank=True)
    db_datas = models.TextField(blank=True) # This field type is a guess.
    store_fname = models.CharField(max_length=256, blank=True)
    name = models.CharField(max_length=256)
    class Meta:
        db_table = u'ir_attachment'

class PublisherWarrantyContract(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'publisher_warranty_contract'

class MailFollowers(models.Model):
    id = models.IntegerField(primary_key=True)
    res_model = models.CharField(max_length=128)
    res_id = models.IntegerField(null=True, blank=True)
    partner = models.ForeignKey(ResPartner)
    class Meta:
        db_table = u'mail_followers'

class MailFollowersMailMessageSubtypeRel(models.Model):
    mail_followers = models.ForeignKey(MailFollowers)
    mail_message_subtype = models.ForeignKey(MailMessageSubtype)
    class Meta:
        db_table = u'mail_followers_mail_message_subtype_rel'

class MailComposeMessageResPartnerRel(models.Model):
    wizard = models.ForeignKey(MailComposeMessage)
    partner = models.ForeignKey(ResPartner)
    class Meta:
        db_table = u'mail_compose_message_res_partner_rel'

class MailMessage(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    body = models.TextField(blank=True)
    model = models.CharField(max_length=128, blank=True)
    record_name = models.CharField(max_length=-1, blank=True)
    date = models.DateTimeField(null=True, blank=True)
    subject = models.CharField(max_length=-1, blank=True)
    message_id = models.CharField(max_length=-1, blank=True)
    parent = models.ForeignKey('self', null=True, blank=True)
    res_id = models.IntegerField(null=True, blank=True)
    subtype = models.ForeignKey(MailMessageSubtype, null=True, blank=True)
    author = models.ForeignKey(ResPartner, null=True, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    email_from = models.CharField(max_length=-1, blank=True)
    class Meta:
        db_table = u'mail_message'

class MailAlias(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    alias_model = models.ForeignKey(IrModel)
    alias_defaults = models.TextField()
    alias_force_thread_id = models.IntegerField(null=True, blank=True)
    alias_name = models.CharField(max_length=-1, unique=True)
    alias_user = models.ForeignKey(ResUsers, null=True, blank=True)
    class Meta:
        db_table = u'mail_alias'

class MailMessageSubtype(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    parent = models.ForeignKey('self', null=True, blank=True)
    name = models.CharField(max_length=-1)
    relation_field = models.CharField(max_length=-1, blank=True)
    default = models.BooleanField(null=True, blank=True)
    res_model = models.CharField(max_length=-1, blank=True)
    description = models.TextField(blank=True)
    class Meta:
        db_table = u'mail_message_subtype'

class BaseActionRuleLeadTest(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    state = models.CharField(max_length=-1, blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    name = models.CharField(max_length=64)
    active = models.BooleanField(null=True, blank=True)
    partner = models.ForeignKey(ResPartner, null=True, blank=True)
    date_action_last = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = u'base_action_rule_lead_test'

class BaseActionRuleIrActServerRel(models.Model):
    base_action_rule = models.ForeignKey(BaseActionRule)
    ir_act_server = models.ForeignKey(IrActServer)
    class Meta:
        db_table = u'base_action_rule_ir_act_server_rel'

class BaseActionRuleResPartnerRel(models.Model):
    base_action_rule = models.ForeignKey(BaseActionRule)
    res_partner = models.ForeignKey(ResPartner)
    class Meta:
        db_table = u'base_action_rule_res_partner_rel'

class BaseActionRule(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    model = models.ForeignKey(IrModel)
    filter_pre = models.ForeignKey(IrFilters, null=True, blank=True)
    sequence = models.IntegerField(null=True, blank=True)
    act_user = models.ForeignKey(ResUsers, null=True, blank=True)
    last_run = models.DateTimeField(null=True, blank=True)
    trg_date = models.ForeignKey(IrModelFields, null=True, blank=True)
    trg_date_range_type = models.CharField(max_length=-1, blank=True)
    filter = models.ForeignKey(IrFilters, null=True, blank=True)
    active = models.BooleanField(null=True, blank=True)
    trg_date_range = models.IntegerField(null=True, blank=True)
    name = models.CharField(max_length=64)
    class Meta:
        db_table = u'base_action_rule'

class SaleReport(models.Model):
    id = models.IntegerField(null=True, blank=True)
    product_id = models.IntegerField(null=True, blank=True)
    product_uom = models.IntegerField(null=True, blank=True)
    product_uom_qty = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    price_total = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    nbr = models.IntegerField(null=True, blank=True)
    date = models.DateField(null=True, blank=True)
    date_confirm = models.DateField(null=True, blank=True)
    year = models.TextField(blank=True)
    month = models.TextField(blank=True)
    day = models.TextField(blank=True)
    partner_id = models.IntegerField(null=True, blank=True)
    user_id = models.IntegerField(null=True, blank=True)
    shop_id = models.IntegerField(null=True, blank=True)
    company_id = models.IntegerField(null=True, blank=True)
    delay = models.FloatField(null=True, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    categ_id = models.IntegerField(null=True, blank=True)
    pricelist_id = models.IntegerField(null=True, blank=True)
    analytic_account_id = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'sale_report'

class SaleMakeInvoice(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    grouped = models.BooleanField(null=True, blank=True)
    invoice_date = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'sale_make_invoice'

class IrFilters(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    is_default = models.BooleanField(null=True, blank=True)
    model_id = models.CharField(max_length=-1)
    domain = models.TextField()
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    name = models.CharField(max_length=64)
    context = models.TextField()
    class Meta:
        db_table = u'ir_filters'

class IrModelFields(models.Model):
    id = models.IntegerField(primary_key=True)
    model = models.CharField(max_length=64)
    model = models.ForeignKey(IrModel)
    name = models.CharField(max_length=64)
    relation = models.CharField(max_length=64, blank=True)
    select_level = models.CharField(max_length=4)
    field_description = models.CharField(max_length=256)
    ttype = models.CharField(max_length=64)
    state = models.CharField(max_length=64)
    view_load = models.BooleanField(null=True, blank=True)
    relate = models.BooleanField(null=True, blank=True)
    relation_field = models.CharField(max_length=128, blank=True)
    translate = models.BooleanField(null=True, blank=True)
    serialization_field = models.ForeignKey('self', null=True, blank=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    domain = models.CharField(max_length=256, blank=True)
    selection = models.CharField(max_length=128, blank=True)
    on_delete = models.CharField(max_length=-1, blank=True)
    selectable = models.BooleanField(null=True, blank=True)
    size = models.IntegerField(null=True, blank=True)
    required = models.BooleanField(null=True, blank=True)
    readonly = models.BooleanField(null=True, blank=True)
    complete_name = models.CharField(max_length=64, blank=True)
    class Meta:
        db_table = u'ir_model_fields'

class EmailTemplatePreview(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    model = models.ForeignKey(IrModel, null=True, blank=True)
    sub_model_object_field = models.ForeignKey(IrModelFields, null=True, db_column='sub_model_object_field', blank=True)
    auto_delete = models.BooleanField(null=True, blank=True)
    mail_server = models.ForeignKey(IrMailServer, null=True, blank=True)
    body_html = models.TextField(blank=True)
    email_to = models.CharField(max_length=-1, blank=True)
    sub_object = models.ForeignKey(IrModel, null=True, db_column='sub_object', blank=True)
    ref_ir_act_window = models.ForeignKey(IrActWindow, null=True, db_column='ref_ir_act_window', blank=True)
    subject = models.CharField(max_length=-1, blank=True)
    lang = models.CharField(max_length=-1, blank=True)
    name = models.CharField(max_length=-1, blank=True)
    email_recipients = models.CharField(max_length=-1, blank=True)
    model_object_field = models.ForeignKey(IrModelFields, null=True, db_column='model_object_field', blank=True)
    report_name = models.CharField(max_length=-1, blank=True)
    report_template = models.ForeignKey(IrActReportXml, null=True, db_column='report_template', blank=True)
    ref_ir_value = models.ForeignKey(IrValues, null=True, db_column='ref_ir_value', blank=True)
    user_signature = models.BooleanField(null=True, blank=True)
    null_value = models.CharField(max_length=-1, blank=True)
    reply_to = models.CharField(max_length=-1, blank=True)
    email_cc = models.CharField(max_length=-1, blank=True)
    model = models.CharField(max_length=128, blank=True)
    copyvalue = models.CharField(max_length=-1, blank=True)
    res_id = models.CharField(max_length=-1, blank=True)
    email_from = models.CharField(max_length=-1, blank=True)
    class Meta:
        db_table = u'email_template_preview'

class SaleOrderLineMakeInvoice(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'sale_order_line_make_invoice'

class SaleAdvancePaymentInv(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    advance_payment_method = models.CharField(max_length=-1)
    amount = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    product = models.ForeignKey(ProductProduct, null=True, blank=True)
    qtty = models.DecimalField(max_digits=65535, decimal_places=65535)
    class Meta:
        db_table = u'sale_advance_payment_inv'

class EmailTemplateAttachmentRel(models.Model):
    email_template = models.ForeignKey(EmailTemplate)
    attachment = models.ForeignKey(IrAttachment)
    class Meta:
        db_table = u'email_template_attachment_rel'

class EmailTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    model = models.ForeignKey(IrModel, null=True, blank=True)
    sub_model_object_field = models.ForeignKey(IrModelFields, null=True, db_column='sub_model_object_field', blank=True)
    auto_delete = models.BooleanField(null=True, blank=True)
    mail_server = models.ForeignKey(IrMailServer, null=True, blank=True)
    body_html = models.TextField(blank=True)
    email_to = models.CharField(max_length=-1, blank=True)
    sub_object = models.ForeignKey(IrModel, null=True, db_column='sub_object', blank=True)
    ref_ir_act_window = models.ForeignKey(IrActWindow, null=True, db_column='ref_ir_act_window', blank=True)
    subject = models.CharField(max_length=-1, blank=True)
    lang = models.CharField(max_length=-1, blank=True)
    name = models.CharField(max_length=-1, blank=True)
    email_recipients = models.CharField(max_length=-1, blank=True)
    model_object_field = models.ForeignKey(IrModelFields, null=True, db_column='model_object_field', blank=True)
    report_name = models.CharField(max_length=-1, blank=True)
    report_template = models.ForeignKey(IrActReportXml, null=True, db_column='report_template', blank=True)
    ref_ir_value = models.ForeignKey(IrValues, null=True, db_column='ref_ir_value', blank=True)
    user_signature = models.BooleanField(null=True, blank=True)
    null_value = models.CharField(max_length=-1, blank=True)
    reply_to = models.CharField(max_length=-1, blank=True)
    email_cc = models.CharField(max_length=-1, blank=True)
    model = models.CharField(max_length=128, blank=True)
    copyvalue = models.CharField(max_length=-1, blank=True)
    email_from = models.CharField(max_length=-1, blank=True)
    class Meta:
        db_table = u'email_template'

class FetchmailConfigSettings(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'fetchmail_config_settings'

class FetchmailServer(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    active = models.BooleanField(null=True, blank=True)
    user = models.CharField(max_length=256, blank=True)
    date = models.DateTimeField(null=True, blank=True)
    configuration = models.TextField(blank=True)
    port = models.IntegerField(null=True, blank=True)
    password = models.CharField(max_length=1024, blank=True)
    name = models.CharField(max_length=256)
    script = models.CharField(max_length=64, blank=True)
    is_ssl = models.BooleanField(null=True, blank=True)
    object = models.ForeignKey(IrModel, null=True, blank=True)
    server = models.CharField(max_length=256, blank=True)
    priority = models.IntegerField(null=True, blank=True)
    attach = models.BooleanField(null=True, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    type = models.CharField(max_length=-1)
    original = models.BooleanField(null=True, blank=True)
    action = models.ForeignKey(IrActServer, null=True, blank=True)
    class Meta:
        db_table = u'fetchmail_server'

class ShareWizardResultLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    password = models.CharField(max_length=64, blank=True)
    user = models.ForeignKey(ResUsers)
    newly_created = models.BooleanField(null=True, blank=True)
    share_wizard = models.ForeignKey(ShareWizard)
    class Meta:
        db_table = u'share_wizard_result_line'

class ResAlarm(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    trigger_duration = models.IntegerField()
    name = models.CharField(max_length=256)
    trigger_occurs = models.CharField(max_length=-1)
    trigger_interval = models.CharField(max_length=-1)
    duration = models.IntegerField(null=True, blank=True)
    repeat = models.IntegerField(null=True, blank=True)
    active = models.BooleanField(null=True, blank=True)
    trigger_related = models.CharField(max_length=-1)
    class Meta:
        db_table = u'res_alarm'

class ShareWizard(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    domain = models.CharField(max_length=256, blank=True)
    record_name = models.CharField(max_length=128, blank=True)
    invite = models.BooleanField(null=True, blank=True)
    view_type = models.CharField(max_length=32)
    user_type = models.CharField(max_length=-1)
    email_2 = models.CharField(max_length=64, blank=True)
    email_3 = models.CharField(max_length=64, blank=True)
    embed_option_search = models.BooleanField(null=True, blank=True)
    message = models.TextField(blank=True)
    name = models.CharField(max_length=64)
    embed_option_title = models.BooleanField(null=True, blank=True)
    email_1 = models.CharField(max_length=64, blank=True)
    new_users = models.TextField(blank=True)
    access_mode = models.CharField(max_length=-1)
    action = models.ForeignKey(IrActWindow)
    class Meta:
        db_table = u'share_wizard'

class CalendarAttendeeChildRel(models.Model):
    attendee = models.ForeignKey(CalendarAttendee)
    child = models.ForeignKey(CalendarAttendee)
    class Meta:
        db_table = u'calendar_attendee_child_rel'

class MeetingAttendeeRel(models.Model):
    event = models.ForeignKey(CrmMeeting)
    attendee = models.ForeignKey(CalendarAttendee)
    class Meta:
        db_table = u'meeting_attendee_rel'

class CalendarAttendeeParentRel(models.Model):
    attendee = models.ForeignKey(CalendarAttendee)
    parent = models.ForeignKey(CalendarAttendee)
    class Meta:
        db_table = u'calendar_attendee_parent_rel'

class CalendarTodoResPartnerRel(models.Model):
    calendar_todo = models.ForeignKey(CalendarTodo)
    res_partner = models.ForeignKey(ResPartner)
    class Meta:
        db_table = u'calendar_todo_res_partner_rel'

class CalendarAlarm(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    model = models.ForeignKey(IrModel, null=True, blank=True)
    repeat = models.IntegerField(null=True, blank=True)
    description = models.TextField(blank=True)
    trigger_occurs = models.CharField(max_length=-1)
    duration = models.IntegerField(null=True, blank=True)
    active = models.BooleanField(null=True, blank=True)
    trigger_related = models.CharField(max_length=-1)
    trigger_duration = models.IntegerField()
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    name = models.CharField(max_length=124, blank=True)
    attach = models.TextField(blank=True) # This field type is a guess.
    event_end_date = models.DateTimeField(null=True, blank=True)
    trigger_interval = models.CharField(max_length=-1)
    alarm = models.ForeignKey(ResAlarm, null=True, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    action = models.CharField(max_length=-1)
    event_date = models.DateTimeField(null=True, blank=True)
    trigger_date = models.DateTimeField(null=True, blank=True)
    res_id = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'calendar_alarm'

class CalendarTodo(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    allday = models.BooleanField(null=True, blank=True)
    sequence = models.IntegerField(null=True, blank=True)
    we = models.BooleanField(null=True, blank=True)
    base_calendar_alarm = models.ForeignKey(CalendarAlarm, null=True, blank=True)
    rrule = models.CharField(max_length=124, blank=True)
    duration = models.IntegerField(null=True, blank=True)
    organizer = models.CharField(max_length=256, blank=True)
    month_list = models.IntegerField(null=True, blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    vtimezone = models.CharField(max_length=64, blank=True)
    tu = models.BooleanField(null=True, blank=True)
    recurrency = models.BooleanField(null=True, blank=True)
    week_list = models.CharField(max_length=-1, blank=True)
    day = models.IntegerField(null=True, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    base_calendar_url = models.CharField(max_length=264, blank=True)
    show_as = models.CharField(max_length=-1, blank=True)
    location = models.CharField(max_length=264, blank=True)
    th = models.BooleanField(null=True, blank=True)
    exrule = models.CharField(max_length=352, blank=True)
    exdate = models.TextField(blank=True)
    fr = models.BooleanField(null=True, blank=True)
    recurrent_id_date = models.DateTimeField(null=True, blank=True)
    description = models.TextField(blank=True)
    end_date = models.DateField(null=True, blank=True)
    byday = models.CharField(max_length=-1, blank=True)
    date = models.DateTimeField(null=True, blank=True)
    active = models.BooleanField(null=True, blank=True)
    class_field = models.CharField(max_length=-1, db_column='class', blank=True) # Field renamed because it was a Python reserved word.
    count = models.IntegerField(null=True, blank=True)
    end_type = models.CharField(max_length=-1, blank=True)
    name = models.CharField(max_length=64, blank=True)
    date_deadline = models.DateTimeField()
    mo = models.BooleanField(null=True, blank=True)
    interval = models.IntegerField(null=True, blank=True)
    su = models.BooleanField(null=True, blank=True)
    alarm = models.ForeignKey(ResAlarm, null=True, blank=True)
    recurrent_id = models.IntegerField(null=True, blank=True)
    organizer = models.ForeignKey(ResUsers, null=True, blank=True)
    sa = models.BooleanField(null=True, blank=True)
    rrule_type = models.CharField(max_length=-1, blank=True)
    select1 = models.CharField(max_length=-1, blank=True)
    class Meta:
        db_table = u'calendar_todo'

class SaleOrderInvoiceRel(models.Model):
    order = models.ForeignKey(SaleOrder)
    invoice = models.ForeignKey(AccountInvoice)
    class Meta:
        db_table = u'sale_order_invoice_rel'

class AlarmAttendeeRel(models.Model):
    alarm = models.ForeignKey(CalendarAlarm)
    attendee = models.ForeignKey(CalendarAttendee)
    class Meta:
        db_table = u'alarm_attendee_rel'

class CrmMeetingType(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64)
    class Meta:
        db_table = u'crm_meeting_type'

class EventAttendeeRel(models.Model):
    event = models.ForeignKey(CalendarEvent)
    attendee = models.ForeignKey(CalendarAttendee)
    class Meta:
        db_table = u'event_attendee_rel'

class MeetingCategoryRel(models.Model):
    event = models.ForeignKey(CrmMeeting)
    type = models.ForeignKey(CrmMeetingType)
    class Meta:
        db_table = u'meeting_category_rel'

class CalendarEventResPartnerRel(models.Model):
    calendar_event = models.ForeignKey(CalendarEvent)
    res_partner = models.ForeignKey(ResPartner)
    class Meta:
        db_table = u'calendar_event_res_partner_rel'

class ResPartner(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=128)
    lang = models.CharField(max_length=64, blank=True)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    comment = models.TextField(blank=True)
    ean13 = models.CharField(max_length=13, blank=True)
    color = models.IntegerField(null=True, blank=True)
    image = models.TextField(blank=True) # This field type is a guess.
    use_parent_address = models.BooleanField(null=True, blank=True)
    active = models.BooleanField(null=True, blank=True)
    street = models.CharField(max_length=128, blank=True)
    supplier = models.BooleanField(null=True, blank=True)
    city = models.CharField(max_length=128, blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    zip = models.CharField(max_length=24, blank=True)
    title = models.ForeignKey(ResPartnerTitle, null=True, db_column='title', blank=True)
    function = models.CharField(max_length=128, blank=True)
    country = models.ForeignKey(ResCountry, null=True, blank=True)
    parent = models.ForeignKey('self', null=True, blank=True)
    employee = models.BooleanField(null=True, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    email = models.CharField(max_length=240, blank=True)
    vat = models.CharField(max_length=32, blank=True)
    website = models.CharField(max_length=64, blank=True)
    fax = models.CharField(max_length=64, blank=True)
    street2 = models.CharField(max_length=128, blank=True)
    phone = models.CharField(max_length=64, blank=True)
    credit_limit = models.FloatField(null=True, blank=True)
    date = models.DateField(null=True, blank=True)
    tz = models.CharField(max_length=64, blank=True)
    customer = models.BooleanField(null=True, blank=True)
    image_medium = models.TextField(blank=True) # This field type is a guess.
    mobile = models.CharField(max_length=64, blank=True)
    ref = models.CharField(max_length=64, blank=True)
    image_small = models.TextField(blank=True) # This field type is a guess.
    birthdate = models.CharField(max_length=64, blank=True)
    is_company = models.BooleanField(null=True, blank=True)
    state = models.ForeignKey(ResCountryState, null=True, blank=True)
    notification_email_send = models.CharField(max_length=-1)
    opt_out = models.BooleanField(null=True, blank=True)
    signup_type = models.CharField(max_length=-1, blank=True)
    signup_expiration = models.DateTimeField(null=True, blank=True)
    signup_token = models.CharField(max_length=-1, blank=True)
    section = models.ForeignKey(CrmCaseSection, null=True, blank=True)
    last_reconciliation_date = models.DateTimeField(null=True, blank=True)
    debit_limit = models.FloatField(null=True, blank=True)
    display_name = models.CharField(max_length=-1, blank=True)
    vat_subjected = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'res_partner'

class CalendarEvent(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    allday = models.BooleanField(null=True, blank=True)
    sequence = models.IntegerField(null=True, blank=True)
    we = models.BooleanField(null=True, blank=True)
    base_calendar_alarm = models.ForeignKey(CalendarAlarm, null=True, blank=True)
    rrule = models.CharField(max_length=124, blank=True)
    duration = models.FloatField(null=True, blank=True)
    organizer = models.CharField(max_length=256, blank=True)
    month_list = models.IntegerField(null=True, blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    vtimezone = models.CharField(max_length=64, blank=True)
    tu = models.BooleanField(null=True, blank=True)
    recurrency = models.BooleanField(null=True, blank=True)
    week_list = models.CharField(max_length=-1, blank=True)
    day = models.IntegerField(null=True, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    base_calendar_url = models.CharField(max_length=264, blank=True)
    location = models.CharField(max_length=264, blank=True)
    th = models.BooleanField(null=True, blank=True)
    exrule = models.CharField(max_length=352, blank=True)
    su = models.BooleanField(null=True, blank=True)
    exdate = models.TextField(blank=True)
    fr = models.BooleanField(null=True, blank=True)
    recurrent_id_date = models.DateTimeField(null=True, blank=True)
    description = models.TextField(blank=True)
    end_date = models.DateField(null=True, blank=True)
    class_field = models.CharField(max_length=-1, db_column='class', blank=True) # Field renamed because it was a Python reserved word.
    byday = models.CharField(max_length=-1, blank=True)
    date = models.DateTimeField()
    active = models.BooleanField(null=True, blank=True)
    show_as = models.CharField(max_length=-1, blank=True)
    count = models.IntegerField(null=True, blank=True)
    end_type = models.CharField(max_length=-1, blank=True)
    name = models.CharField(max_length=64, blank=True)
    date_deadline = models.DateTimeField()
    mo = models.BooleanField(null=True, blank=True)
    interval = models.IntegerField(null=True, blank=True)
    recurrent_id = models.IntegerField(null=True, blank=True)
    alarm = models.ForeignKey(ResAlarm, null=True, blank=True)
    organizer = models.ForeignKey(ResUsers, null=True, blank=True)
    sa = models.BooleanField(null=True, blank=True)
    rrule_type = models.CharField(max_length=-1, blank=True)
    select1 = models.CharField(max_length=-1, blank=True)
    class Meta:
        db_table = u'calendar_event'

class CrmMeetingPartnerRel(models.Model):
    meeting = models.ForeignKey(CrmMeeting)
    partner = models.ForeignKey(ResPartner)
    class Meta:
        db_table = u'crm_meeting_partner_rel'

class CalendarAttendee(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    cn = models.CharField(max_length=124, blank=True)
    cutype = models.CharField(max_length=-1, blank=True)
    partner = models.ForeignKey(ResPartner, null=True, blank=True)
    availability = models.CharField(max_length=-1, blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    language = models.CharField(max_length=-1, blank=True)
    delegated_from = models.CharField(max_length=124, blank=True)
    sent_by = models.CharField(max_length=124, blank=True)
    member = models.CharField(max_length=124, blank=True)
    delegated_to = models.CharField(max_length=124, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    role = models.CharField(max_length=-1, blank=True)
    ref = models.CharField(max_length=128, blank=True)
    email = models.CharField(max_length=124, blank=True)
    dir = models.CharField(max_length=124, blank=True)
    rsvp = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'calendar_attendee'

class CrmMeeting(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    date_closed = models.DateTimeField(null=True, blank=True)
    allday = models.BooleanField(null=True, blank=True)
    sequence = models.IntegerField(null=True, blank=True)
    we = models.BooleanField(null=True, blank=True)
    base_calendar_alarm = models.ForeignKey(CalendarAlarm, null=True, blank=True)
    rrule = models.CharField(max_length=124, blank=True)
    duration = models.FloatField(null=True, blank=True)
    organizer = models.CharField(max_length=256, blank=True)
    month_list = models.IntegerField(null=True, blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    vtimezone = models.CharField(max_length=64, blank=True)
    tu = models.BooleanField(null=True, blank=True)
    recurrency = models.BooleanField(null=True, blank=True)
    week_list = models.CharField(max_length=-1, blank=True)
    state = models.CharField(max_length=16, blank=True)
    base_calendar_url = models.CharField(max_length=264, blank=True)
    location = models.CharField(max_length=264, blank=True)
    th = models.BooleanField(null=True, blank=True)
    exrule = models.CharField(max_length=352, blank=True)
    exdate = models.TextField(blank=True)
    fr = models.BooleanField(null=True, blank=True)
    recurrent_id_date = models.DateTimeField(null=True, blank=True)
    description = models.TextField(blank=True)
    end_date = models.DateField(null=True, blank=True)
    class_field = models.CharField(max_length=-1, db_column='class', blank=True) # Field renamed because it was a Python reserved word.
    byday = models.CharField(max_length=-1, blank=True)
    date = models.DateTimeField()
    active = models.BooleanField(null=True, blank=True)
    day = models.IntegerField(null=True, blank=True)
    name = models.CharField(max_length=128)
    count = models.IntegerField(null=True, blank=True)
    end_type = models.CharField(max_length=-1, blank=True)
    date_open = models.DateTimeField(null=True, blank=True)
    date_deadline = models.DateTimeField()
    mo = models.BooleanField(null=True, blank=True)
    interval = models.IntegerField(null=True, blank=True)
    su = models.BooleanField(null=True, blank=True)
    alarm = models.ForeignKey(ResAlarm, null=True, blank=True)
    recurrent_id = models.IntegerField(null=True, blank=True)
    select1 = models.CharField(max_length=-1, blank=True)
    organizer = models.ForeignKey(ResUsers, null=True, blank=True)
    sa = models.BooleanField(null=True, blank=True)
    rrule_type = models.CharField(max_length=-1, blank=True)
    show_as = models.CharField(max_length=-1, blank=True)
    opportunity = models.ForeignKey(CrmLead, null=True, blank=True)
    phonecall = models.ForeignKey(CrmPhonecall, null=True, blank=True)
    class Meta:
        db_table = u'crm_meeting'

class SaleShop(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    pricelist = models.ForeignKey(ProductPricelist, null=True, blank=True)
    project = models.ForeignKey(AccountAnalyticAccount, null=True, blank=True)
    name = models.CharField(max_length=64)
    payment_default = models.ForeignKey(AccountPaymentTerm)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    class Meta:
        db_table = u'sale_shop'

class CrmCaseChannel(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    active = models.BooleanField(null=True, blank=True)
    name = models.CharField(max_length=64)
    class Meta:
        db_table = u'crm_case_channel'

class CrmCaseCateg(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64)
    object = models.ForeignKey(IrModel, null=True, blank=True)
    section = models.ForeignKey(CrmCaseSection, null=True, blank=True)
    class Meta:
        db_table = u'crm_case_categ'

class CrmCaseStage(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    case_default = models.BooleanField(null=True, blank=True)
    requirements = models.TextField(blank=True)
    name = models.CharField(max_length=64)
    probability = models.FloatField()
    sequence = models.IntegerField(null=True, blank=True)
    on_change = models.BooleanField(null=True, blank=True)
    fold = models.BooleanField(null=True, blank=True)
    state = models.CharField(max_length=-1)
    type = models.CharField(max_length=16)
    class Meta:
        db_table = u'crm_case_stage'

class SaleOrder(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    origin = models.CharField(max_length=64, blank=True)
    order_policy = models.CharField(max_length=-1)
    shop = models.ForeignKey(SaleShop)
    client_order_ref = models.CharField(max_length=64, blank=True)
    date_order = models.DateField()
    partner = models.ForeignKey(ResPartner)
    note = models.TextField(blank=True)
    fiscal_position = models.ForeignKey(AccountFiscalPosition, null=True, db_column='fiscal_position', blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    payment_term = models.ForeignKey(AccountPaymentTerm, null=True, db_column='payment_term', blank=True)
    company_id = models.IntegerField(null=True, blank=True)
    amount_tax = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    pricelist = models.ForeignKey(ProductPricelist)
    partner_invoice = models.ForeignKey(ResPartner)
    amount_untaxed = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    date_confirm = models.DateField(null=True, blank=True)
    amount_total = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    project = models.ForeignKey(AccountAnalyticAccount, null=True, blank=True)
    name = models.CharField(max_length=64)
    partner_shipping = models.ForeignKey(ResPartner)
    invoice_quantity = models.CharField(max_length=-1)
    section = models.ForeignKey(CrmCaseSection, null=True, blank=True)
    class Meta:
        db_table = u'sale_order'

class SaleOrderTax(models.Model):
    order_line = models.ForeignKey(SaleOrderLine)
    tax = models.ForeignKey(AccountTax)
    class Meta:
        db_table = u'sale_order_tax'

class CrmSegmentation(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64)
    categ = models.ForeignKey(ResPartnerCategory)
    state = models.CharField(max_length=-1, blank=True)
    sales_purchase_active = models.BooleanField(null=True, blank=True)
    exclusif = models.BooleanField(null=True, blank=True)
    partner_id = models.IntegerField(null=True, blank=True)
    description = models.TextField(blank=True)
    class Meta:
        db_table = u'crm_segmentation'

class CrmLeadReport(models.Model):
    id = models.IntegerField(null=True, blank=True)
    deadline_year = models.TextField(blank=True)
    deadline_month = models.TextField(blank=True)
    deadline_day = models.TextField(blank=True)
    creation_year = models.TextField(blank=True)
    creation_month = models.TextField(blank=True)
    creation_day = models.TextField(blank=True)
    opening_date = models.TextField(blank=True)
    date_closed = models.TextField(blank=True)
    state = models.CharField(max_length=-1, blank=True)
    user_id = models.IntegerField(null=True, blank=True)
    probability = models.FloatField(null=True, blank=True)
    stage_id = models.IntegerField(null=True, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    company_id = models.IntegerField(null=True, blank=True)
    priority = models.CharField(max_length=-1, blank=True)
    section_id = models.IntegerField(null=True, blank=True)
    channel_id = models.IntegerField(null=True, blank=True)
    type_id = models.IntegerField(null=True, blank=True)
    partner_id = models.IntegerField(null=True, blank=True)
    country_id = models.IntegerField(null=True, blank=True)
    planned_revenue = models.FloatField(null=True, blank=True)
    probable_revenue = models.FloatField(null=True, blank=True)
    nbr = models.IntegerField(null=True, blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    delay_close = models.FloatField(null=True, blank=True)
    delay_expected = models.FloatField(null=True, blank=True)
    delay_open = models.FloatField(null=True, blank=True)
    class Meta:
        db_table = u'crm_lead_report'

class CrmPhonecallReport(models.Model):
    id = models.IntegerField(null=True, blank=True)
    name = models.TextField(blank=True)
    month = models.TextField(blank=True)
    day = models.TextField(blank=True)
    creation_date = models.TextField(blank=True)
    opening_date = models.TextField(blank=True)
    date_closed = models.TextField(blank=True)
    state = models.CharField(max_length=16, blank=True)
    user_id = models.IntegerField(null=True, blank=True)
    section_id = models.IntegerField(null=True, blank=True)
    categ_id = models.IntegerField(null=True, blank=True)
    partner_id = models.IntegerField(null=True, blank=True)
    duration = models.FloatField(null=True, blank=True)
    company_id = models.IntegerField(null=True, blank=True)
    priority = models.CharField(max_length=-1, blank=True)
    nbr = models.IntegerField(null=True, blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    delay_close = models.FloatField(null=True, blank=True)
    delay_open = models.FloatField(null=True, blank=True)
    class Meta:
        db_table = u'crm_phonecall_report'

class SaleOrderLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    product_uos_qty = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    product_uom = models.ForeignKey(ProductUom, db_column='product_uom')
    sequence = models.IntegerField(null=True, blank=True)
    order = models.ForeignKey(SaleOrder)
    price_unit = models.DecimalField(max_digits=65535, decimal_places=65535)
    product_uom_qty = models.DecimalField(max_digits=65535, decimal_places=65535)
    discount = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    product_uos = models.ForeignKey(ProductUom, null=True, db_column='product_uos', blank=True)
    name = models.TextField()
    company_id = models.IntegerField(null=True, blank=True)
    salesman_id = models.IntegerField(null=True, blank=True)
    state = models.CharField(max_length=-1)
    product = models.ForeignKey(ProductProduct, null=True, blank=True)
    order_partner_id = models.IntegerField(null=True, blank=True)
    th_weight = models.FloatField(null=True, blank=True)
    invoiced = models.BooleanField(null=True, blank=True)
    type = models.CharField(max_length=-1)
    address_allotment = models.ForeignKey(ResPartner, null=True, blank=True)
    class Meta:
        db_table = u'sale_order_line'

class CrmPartnerBinding(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    action = models.CharField(max_length=-1)
    partner = models.ForeignKey(ResPartner, null=True, blank=True)
    class Meta:
        db_table = u'crm_partner_binding'

class SaleOrderLineInvoiceRel(models.Model):
    order_line = models.ForeignKey(SaleOrderLine)
    invoice = models.ForeignKey(AccountInvoiceLine)
    class Meta:
        db_table = u'sale_order_line_invoice_rel'

class SectionStageRel(models.Model):
    stage = models.ForeignKey(CrmCaseStage)
    section = models.ForeignKey(CrmCaseSection)
    class Meta:
        db_table = u'section_stage_rel'

class CrmMergeOpportunity(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'crm_merge_opportunity'

class MergeOpportunityRel(models.Model):
    merge = models.ForeignKey(CrmMergeOpportunity)
    opportunity = models.ForeignKey(CrmLead)
    class Meta:
        db_table = u'merge_opportunity_rel'

class SaleMemberRel(models.Model):
    section = models.ForeignKey(CrmCaseSection)
    member = models.ForeignKey(ResUsers)
    class Meta:
        db_table = u'sale_member_rel'

class CrmLead2OpportunityPartner(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    action = models.CharField(max_length=-1)
    partner = models.ForeignKey(ResPartner, null=True, blank=True)
    name = models.CharField(max_length=-1)
    class Meta:
        db_table = u'crm_lead2opportunity_partner'

class CrmLeadCrmLead2OpportunityPartnerRel(models.Model):
    crm_lead2opportunity_partner = models.ForeignKey(CrmLead2OpportunityPartner)
    crm_lead = models.ForeignKey(CrmLead)
    class Meta:
        db_table = u'crm_lead_crm_lead2opportunity_partner_rel'

class CrmOpportunity2Phonecall(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    name = models.CharField(max_length=64)
    categ = models.ForeignKey(CrmCaseCateg, null=True, blank=True)
    section = models.ForeignKey(CrmCaseSection, null=True, blank=True)
    note = models.TextField(blank=True)
    phone = models.CharField(max_length=64, blank=True)
    date = models.DateTimeField(null=True, blank=True)
    contact_name = models.CharField(max_length=64, blank=True)
    partner = models.ForeignKey(ResPartner, null=True, blank=True)
    action = models.CharField(max_length=-1)
    class Meta:
        db_table = u'crm_opportunity2phonecall'

class CrmPhonecall2Phonecall(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    name = models.CharField(max_length=64)
    categ = models.ForeignKey(CrmCaseCateg, null=True, blank=True)
    section = models.ForeignKey(CrmCaseSection, null=True, blank=True)
    note = models.TextField(blank=True)
    phone = models.CharField(max_length=64, blank=True)
    date = models.DateTimeField(null=True, blank=True)
    action = models.CharField(max_length=-1)
    contact_name = models.CharField(max_length=64, blank=True)
    partner = models.ForeignKey(ResPartner, null=True, blank=True)
    class Meta:
        db_table = u'crm_phonecall2phonecall'

class AccountInvoiceReport(models.Model):
    id = models.IntegerField(null=True, blank=True)
    date = models.DateField(null=True, blank=True)
    year = models.TextField(blank=True)
    month = models.TextField(blank=True)
    day = models.TextField(blank=True)
    product_id = models.IntegerField(null=True, blank=True)
    partner_id = models.IntegerField(null=True, blank=True)
    payment_term = models.IntegerField(null=True, blank=True)
    period_id = models.IntegerField(null=True, blank=True)
    uom_name = models.CharField(max_length=64, blank=True)
    currency_id = models.IntegerField(null=True, blank=True)
    journal_id = models.IntegerField(null=True, blank=True)
    fiscal_position = models.IntegerField(null=True, blank=True)
    user_id = models.IntegerField(null=True, blank=True)
    company_id = models.IntegerField(null=True, blank=True)
    nbr = models.BigIntegerField(null=True, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    categ_id = models.IntegerField(null=True, blank=True)
    date_due = models.DateField(null=True, blank=True)
    account_id = models.IntegerField(null=True, blank=True)
    account_line_id = models.IntegerField(null=True, blank=True)
    partner_bank_id = models.IntegerField(null=True, blank=True)
    product_qty = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    price_total = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    price_average = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    currency_rate = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    residual = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    commercial_partner_id = models.IntegerField(null=True, blank=True)
    section_id = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'account_invoice_report'

class CrmMakeSale(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    close = models.BooleanField(null=True, blank=True)
    shop = models.ForeignKey(SaleShop)
    partner = models.ForeignKey(ResPartner)
    class Meta:
        db_table = u'crm_make_sale'

class CrmLead(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    date_closed = models.DateTimeField(null=True, blank=True)
    type = models.ForeignKey(CrmCaseResourceType, null=True, blank=True)
    color = models.IntegerField(null=True, blank=True)
    date_action_last = models.DateTimeField(null=True, blank=True)
    day_close = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    active = models.BooleanField(null=True, blank=True)
    street = models.CharField(max_length=128, blank=True)
    day_open = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    contact_name = models.CharField(max_length=64, blank=True)
    partner = models.ForeignKey(ResPartner, null=True, blank=True)
    city = models.CharField(max_length=128, blank=True)
    date_open = models.DateTimeField(null=True, blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    opt_out = models.BooleanField(null=True, blank=True)
    title = models.ForeignKey(ResPartnerTitle, null=True, db_column='title', blank=True)
    partner_name = models.CharField(max_length=64, blank=True)
    planned_revenue = models.FloatField(null=True, blank=True)
    country = models.ForeignKey(ResCountry, null=True, blank=True)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    priority = models.CharField(max_length=-1, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    email_cc = models.TextField(blank=True)
    date_action_next = models.DateTimeField(null=True, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    street2 = models.CharField(max_length=128, blank=True)
    function = models.CharField(max_length=128, blank=True)
    fax = models.CharField(max_length=64, blank=True)
    description = models.TextField(blank=True)
    planned_cost = models.FloatField(null=True, blank=True)
    ref2 = models.CharField(max_length=128, blank=True)
    section = models.ForeignKey(CrmCaseSection, null=True, blank=True)
    title_action = models.CharField(max_length=64, blank=True)
    phone = models.CharField(max_length=64, blank=True)
    probability = models.FloatField(null=True, blank=True)
    payment_mode = models.ForeignKey(CrmPaymentMode, null=True, db_column='payment_mode', blank=True)
    date_action = models.DateField(null=True, blank=True)
    name = models.CharField(max_length=64)
    stage = models.ForeignKey(CrmCaseStage, null=True, blank=True)
    zip = models.CharField(max_length=24, blank=True)
    date_deadline = models.DateField(null=True, blank=True)
    mobile = models.CharField(max_length=64, blank=True)
    ref = models.CharField(max_length=128, blank=True)
    channel = models.ForeignKey(CrmCaseChannel, null=True, blank=True)
    state = models.ForeignKey(ResCountryState, null=True, blank=True)
    email_from = models.CharField(max_length=128, blank=True)
    referred = models.CharField(max_length=64, blank=True)
    class Meta:
        db_table = u'crm_lead'

class SaleOrderCategoryRel(models.Model):
    order = models.ForeignKey(SaleOrder)
    category = models.ForeignKey(CrmCaseCateg)
    class Meta:
        db_table = u'sale_order_category_rel'

class PortalPaymentAcquirer(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    visible = models.BooleanField(null=True, blank=True)
    name = models.CharField(max_length=-1)
    form_template = models.TextField()
    class Meta:
        db_table = u'portal_payment_acquirer'

class CrmSegmentationLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    expr_name = models.CharField(max_length=64)
    name = models.CharField(max_length=64)
    expr_value = models.FloatField()
    operator = models.CharField(max_length=-1)
    segmentation = models.ForeignKey(CrmSegmentation, null=True, blank=True)
    expr_operator = models.CharField(max_length=-1)
    class Meta:
        db_table = u'crm_segmentation_line'

class CrmPhonecall(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    date_closed = models.DateTimeField(null=True, blank=True)
    description = models.TextField(blank=True)
    state = models.CharField(max_length=16, blank=True)
    date_action_last = models.DateTimeField(null=True, blank=True)
    section = models.ForeignKey(CrmCaseSection, null=True, blank=True)
    active = models.BooleanField(null=True, blank=True)
    duration = models.FloatField(null=True, blank=True)
    partner_mobile = models.CharField(max_length=32, blank=True)
    date = models.DateTimeField(null=True, blank=True)
    categ = models.ForeignKey(CrmCaseCateg, null=True, blank=True)
    opportunity = models.ForeignKey(CrmLead, null=True, blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    date_open = models.DateTimeField(null=True, blank=True)
    partner = models.ForeignKey(ResPartner, null=True, blank=True)
    date_action_next = models.DateTimeField(null=True, blank=True)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    name = models.CharField(max_length=64)
    priority = models.CharField(max_length=-1, blank=True)
    partner_phone = models.CharField(max_length=32, blank=True)
    email_from = models.CharField(max_length=128, blank=True)
    class Meta:
        db_table = u'crm_phonecall'

class ShareWizardResGroupRel(models.Model):
    share = models.ForeignKey(ShareWizard)
    group = models.ForeignKey(ResGroups)
    class Meta:
        db_table = u'share_wizard_res_group_rel'

class CrmLead2OpportunityPartnerMassResUsersRel(models.Model):
    crm_lead2opportunity_partner_mass = models.ForeignKey(CrmLead2OpportunityPartnerMass)
    res_users = models.ForeignKey(ResUsers)
    class Meta:
        db_table = u'crm_lead2opportunity_partner_mass_res_users_rel'

class CrmLeadCategoryRel(models.Model):
    lead = models.ForeignKey(CrmLead)
    category = models.ForeignKey(CrmCaseCateg)
    class Meta:
        db_table = u'crm_lead_category_rel'

class CrmLeadCrmLead2OpportunityPartnerMassRel(models.Model):
    crm_lead2opportunity_partner_mass = models.ForeignKey(CrmLead2OpportunityPartnerMass)
    crm_lead = models.ForeignKey(CrmLead)
    class Meta:
        db_table = u'crm_lead_crm_lead2opportunity_partner_mass_rel'

class CrmLead2OpportunityPartnerMass(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=-1)
    action = models.CharField(max_length=-1)
    partner = models.ForeignKey(ResPartner, null=True, blank=True)
    section = models.ForeignKey(CrmCaseSection, null=True, blank=True)
    class Meta:
        db_table = u'crm_lead2opportunity_partner_mass'

class PortalWizard(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    portal = models.ForeignKey(ResGroups)
    welcome_message = models.TextField(blank=True)
    class Meta:
        db_table = u'portal_wizard'

class ShareWizardResUserRel(models.Model):
    share = models.ForeignKey(ShareWizard)
    user = models.ForeignKey(ResUsers)
    class Meta:
        db_table = u'share_wizard_res_user_rel'

class PortalWizardUser(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    in_portal = models.BooleanField(null=True, blank=True)
    partner = models.ForeignKey(ResPartner)
    email = models.CharField(max_length=240, blank=True)
    wizard = models.ForeignKey(PortalWizard)
    class Meta:
        db_table = u'portal_wizard_user'

class ResCountry(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    address_format = models.TextField(blank=True)
    currency = models.ForeignKey(ResCurrency, null=True, blank=True)
    code = models.CharField(max_length=2, unique=True, blank=True)
    name = models.CharField(max_length=64, unique=True)
    class Meta:
        db_table = u'res_country'

class PortalCrmCrmContactUsResCompanyRel(models.Model):
    portal_crm_crm_contact_us = models.ForeignKey(PortalCrmCrmContactUs)
    res_company = models.ForeignKey(ResCompany)
    class Meta:
        db_table = u'portal_crm_crm_contact_us_res_company_rel'

class CrmPaymentMode(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64)
    section = models.ForeignKey(CrmCaseSection, null=True, blank=True)
    class Meta:
        db_table = u'crm_payment_mode'

class DecimalPrecision(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    digits = models.IntegerField()
    name = models.CharField(max_length=50)
    class Meta:
        db_table = u'decimal_precision'

class ResUsers(models.Model):
    id = models.IntegerField(primary_key=True)
    active = models.BooleanField(null=True, blank=True)
    login = models.CharField(max_length=64, unique=True)
    password = models.CharField(max_length=64, blank=True)
    company = models.ForeignKey(ResCompany)
    partner = models.ForeignKey(ResPartner)
    create_uid = models.ForeignKey('self', null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey('self', null=True, db_column='write_uid', blank=True)
    menu_id = models.IntegerField(null=True, blank=True)
    login_date = models.DateField(null=True, blank=True)
    signature = models.TextField(blank=True)
    action_id = models.IntegerField(null=True, blank=True)
    alias = models.ForeignKey(MailAlias)
    share = models.BooleanField(null=True, blank=True)
    default_section = models.ForeignKey(CrmCaseSection, null=True, blank=True)
    class Meta:
        db_table = u'res_users'

class CrmCaseSection(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    working_hours = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    alias = models.ForeignKey(MailAlias)
    code = models.CharField(max_length=8, unique=True, blank=True)
    active = models.BooleanField(null=True, blank=True)
    change_responsible = models.BooleanField(null=True, blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    name = models.CharField(max_length=64)
    note = models.TextField(blank=True)
    parent = models.ForeignKey('self', null=True, blank=True)
    complete_name = models.CharField(max_length=256, blank=True)
    reply_to = models.CharField(max_length=64, blank=True)
    resource_calendar = models.ForeignKey(ResourceCalendar, null=True, blank=True)
    class Meta:
        db_table = u'crm_case_section'

class CrmCaseResourceType(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64)
    section = models.ForeignKey(CrmCaseSection, null=True, blank=True)
    class Meta:
        db_table = u'crm_case_resource_type'

class PortalCrmCrmContactUs(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    date_closed = models.DateTimeField(null=True, blank=True)
    type = models.ForeignKey(CrmCaseResourceType, null=True, blank=True)
    color = models.IntegerField(null=True, blank=True)
    date_action_last = models.DateTimeField(null=True, blank=True)
    day_close = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    active = models.BooleanField(null=True, blank=True)
    street = models.CharField(max_length=128, blank=True)
    day_open = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    contact_name = models.CharField(max_length=64, blank=True)
    partner = models.ForeignKey(ResPartner, null=True, blank=True)
    city = models.CharField(max_length=128, blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    opt_out = models.BooleanField(null=True, blank=True)
    date_open = models.DateTimeField(null=True, blank=True)
    title = models.ForeignKey(ResPartnerTitle, null=True, db_column='title', blank=True)
    partner_name = models.CharField(max_length=64, blank=True)
    planned_revenue = models.FloatField(null=True, blank=True)
    country = models.ForeignKey(ResCountry, null=True, blank=True)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    priority = models.CharField(max_length=-1, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    email_cc = models.TextField(blank=True)
    date_action_next = models.DateTimeField(null=True, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    street2 = models.CharField(max_length=128, blank=True)
    function = models.CharField(max_length=128, blank=True)
    fax = models.CharField(max_length=64, blank=True)
    description = models.TextField(blank=True)
    planned_cost = models.FloatField(null=True, blank=True)
    ref2 = models.CharField(max_length=128, blank=True)
    section = models.ForeignKey(CrmCaseSection, null=True, blank=True)
    phone = models.CharField(max_length=64, blank=True)
    probability = models.FloatField(null=True, blank=True)
    payment_mode = models.ForeignKey(CrmPaymentMode, null=True, db_column='payment_mode', blank=True)
    date_action = models.DateField(null=True, blank=True)
    title_action = models.CharField(max_length=64, blank=True)
    name = models.CharField(max_length=64)
    stage = models.ForeignKey(CrmCaseStage, null=True, blank=True)
    zip = models.CharField(max_length=24, blank=True)
    date_deadline = models.DateField(null=True, blank=True)
    mobile = models.CharField(max_length=64, blank=True)
    ref = models.CharField(max_length=128, blank=True)
    channel = models.ForeignKey(CrmCaseChannel, null=True, blank=True)
    state = models.ForeignKey(ResCountryState, null=True, blank=True)
    email_from = models.CharField(max_length=128, blank=True)
    referred = models.CharField(max_length=64, blank=True)
    class Meta:
        db_table = u'portal_crm_crm_contact_us'

class AccountAnalyticLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    name = models.CharField(max_length=256)
    unit_amount = models.FloatField(null=True, blank=True)
    date = models.DateField()
    company_id = models.IntegerField(null=True, blank=True)
    account = models.ForeignKey(AccountAnalyticAccount)
    code = models.CharField(max_length=8, blank=True)
    general_account = models.ForeignKey(AccountAccount)
    currency_id = models.IntegerField(null=True, blank=True)
    move = models.ForeignKey(AccountMoveLine, null=True, blank=True)
    product = models.ForeignKey(ProductProduct, null=True, blank=True)
    product_uom = models.ForeignKey(ProductUom, null=True, blank=True)
    journal = models.ForeignKey(AccountAnalyticJournal)
    amount_currency = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    ref = models.CharField(max_length=64, blank=True)
    class Meta:
        db_table = u'account_analytic_line'

class AccountAnalyticAccount(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    code = models.CharField(max_length=-1, blank=True)
    description = models.TextField(blank=True)
    quantity_max = models.FloatField(null=True, blank=True)
    currency_id = models.IntegerField(null=True, blank=True)
    date = models.DateField(null=True, blank=True)
    partner = models.ForeignKey(ResPartner, null=True, blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    name = models.CharField(max_length=128)
    parent = models.ForeignKey('self', null=True, blank=True)
    date_start = models.DateField(null=True, blank=True)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    state = models.CharField(max_length=-1)
    manager = models.ForeignKey(ResUsers, null=True, blank=True)
    type = models.CharField(max_length=-1)
    template = models.ForeignKey('self', null=True, blank=True)
    class Meta:
        db_table = u'account_analytic_account'

class ProductProduct(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    ean13 = models.CharField(max_length=13, blank=True)
    color = models.IntegerField(null=True, blank=True)
    image = models.TextField(blank=True) # This field type is a guess.
    price_extra = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    default_code = models.CharField(max_length=64, blank=True)
    name_template = models.CharField(max_length=128, blank=True)
    active = models.BooleanField(null=True, blank=True)
    variants = models.CharField(max_length=64, blank=True)
    image_medium = models.TextField(blank=True) # This field type is a guess.
    image_small = models.TextField(blank=True) # This field type is a guess.
    product_tmpl = models.ForeignKey(ProductTemplate)
    price_margin = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    class Meta:
        db_table = u'product_product'

class ProductUomCateg(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64)
    class Meta:
        db_table = u'product_uom_categ'

class ProductUom(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    uom_type = models.CharField(max_length=-1)
    category = models.ForeignKey(ProductUomCateg)
    name = models.CharField(max_length=64)
    rounding = models.DecimalField(max_digits=65535, decimal_places=65535)
    factor = models.DecimalField(max_digits=65535, decimal_places=65535)
    active = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'product_uom'

class PricelistPartnerinfo(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    min_quantity = models.FloatField()
    price = models.DecimalField(max_digits=65535, decimal_places=65535)
    suppinfo = models.ForeignKey(ProductSupplierinfo)
    name = models.CharField(max_length=64, blank=True)
    class Meta:
        db_table = u'pricelist_partnerinfo'

class ProductPriceList(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    qty1 = models.IntegerField(null=True, blank=True)
    qty2 = models.IntegerField(null=True, blank=True)
    qty3 = models.IntegerField(null=True, blank=True)
    qty4 = models.IntegerField(null=True, blank=True)
    qty5 = models.IntegerField(null=True, blank=True)
    price_list = models.ForeignKey(ProductPricelist, db_column='price_list')
    class Meta:
        db_table = u'product_price_list'

class ProductPriceType(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    active = models.BooleanField(null=True, blank=True)
    field = models.CharField(max_length=32)
    currency = models.ForeignKey(ResCurrency)
    name = models.CharField(max_length=32)
    class Meta:
        db_table = u'product_price_type'

class ProductPricelistVersion(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64)
    active = models.BooleanField(null=True, blank=True)
    pricelist = models.ForeignKey(ProductPricelist)
    date_end = models.DateField(null=True, blank=True)
    date_start = models.DateField(null=True, blank=True)
    company_id = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'product_pricelist_version'

class ProductPricelist(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    currency = models.ForeignKey(ResCurrency)
    name = models.CharField(max_length=64)
    active = models.BooleanField(null=True, blank=True)
    type = models.CharField(max_length=-1)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    class Meta:
        db_table = u'product_pricelist'

class ProductPricelistType(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64)
    key = models.CharField(max_length=64)
    class Meta:
        db_table = u'product_pricelist_type'

class ProductSupplierinfo(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.ForeignKey(ResPartner, db_column='name')
    sequence = models.IntegerField(null=True, blank=True)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    qty = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    delay = models.IntegerField()
    min_qty = models.FloatField()
    product_code = models.CharField(max_length=64, blank=True)
    product_name = models.CharField(max_length=128, blank=True)
    product = models.ForeignKey(ProductTemplate)
    class Meta:
        db_table = u'product_supplierinfo'

class ProductUl(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    type = models.CharField(max_length=-1)
    name = models.CharField(max_length=64)
    class Meta:
        db_table = u'product_ul'

class ProductPackaging(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    ul = models.ForeignKey(ProductUl, db_column='ul')
    code = models.CharField(max_length=14, blank=True)
    product = models.ForeignKey(ProductProduct)
    weight = models.FloatField(null=True, blank=True)
    sequence = models.IntegerField(null=True, blank=True)
    ul_qty = models.IntegerField(null=True, blank=True)
    ean = models.CharField(max_length=14, blank=True)
    qty = models.FloatField(null=True, blank=True)
    width = models.FloatField(null=True, blank=True)
    length = models.FloatField(null=True, blank=True)
    rows = models.IntegerField()
    height = models.FloatField(null=True, blank=True)
    weight_ul = models.FloatField(null=True, blank=True)
    name = models.TextField(blank=True)
    class Meta:
        db_table = u'product_packaging'

class ProductCategory(models.Model):
    id = models.IntegerField(primary_key=True)
    parent_left = models.IntegerField(null=True, blank=True)
    parent_right = models.IntegerField(null=True, blank=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64)
    sequence = models.IntegerField(null=True, blank=True)
    parent = models.ForeignKey('self', null=True, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    class Meta:
        db_table = u'product_category'

class AccountPaymentTerm(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    active = models.BooleanField(null=True, blank=True)
    note = models.TextField(blank=True)
    name = models.CharField(max_length=64)
    class Meta:
        db_table = u'account_payment_term'

class ProductPricelistItem(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    price_round = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    price_discount = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    base_pricelist = models.ForeignKey(ProductPricelist, null=True, blank=True)
    sequence = models.IntegerField()
    price_max_margin = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    company_id = models.IntegerField(null=True, blank=True)
    name = models.CharField(max_length=64, blank=True)
    product_tmpl = models.ForeignKey(ProductTemplate, null=True, blank=True)
    product = models.ForeignKey(ProductProduct, null=True, blank=True)
    base = models.IntegerField()
    price_version = models.ForeignKey(ProductPricelistVersion)
    min_quantity = models.IntegerField()
    price_min_margin = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    categ = models.ForeignKey(ProductCategory, null=True, blank=True)
    price_surcharge = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    class Meta:
        db_table = u'product_pricelist_item'

class AccountAccountFinancialReport(models.Model):
    account = models.ForeignKey(AccountAccount)
    report_line = models.ForeignKey(AccountFinancialReport)
    class Meta:
        db_table = u'account_account_financial_report'

class AccountPaymentTermLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    payment = models.ForeignKey(AccountPaymentTerm)
    days2 = models.IntegerField()
    value = models.CharField(max_length=-1)
    value_amount = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    days = models.IntegerField()
    class Meta:
        db_table = u'account_payment_term_line'

class ProductTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    warranty = models.FloatField(null=True, blank=True)
    uos = models.ForeignKey(ProductUom, null=True, blank=True)
    list_price = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    description = models.TextField(blank=True)
    weight = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    weight_net = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    standard_price = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    mes_type = models.CharField(max_length=-1, blank=True)
    uom = models.ForeignKey(ProductUom)
    description_purchase = models.TextField(blank=True)
    cost_method = models.CharField(max_length=-1)
    categ = models.ForeignKey(ProductCategory)
    name = models.CharField(max_length=128)
    uos_coeff = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    volume = models.FloatField(null=True, blank=True)
    sale_ok = models.BooleanField(null=True, blank=True)
    description_sale = models.TextField(blank=True)
    product_manager = models.ForeignKey(ResUsers, null=True, db_column='product_manager', blank=True)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    produce_delay = models.FloatField(null=True, blank=True)
    uom_po = models.ForeignKey(ProductUom)
    rental = models.BooleanField(null=True, blank=True)
    type = models.CharField(max_length=-1)
    class Meta:
        db_table = u'product_template'

class AccountMove(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64)
    state = models.CharField(max_length=-1)
    ref = models.CharField(max_length=64, blank=True)
    company_id = models.IntegerField(null=True, blank=True)
    journal = models.ForeignKey(AccountJournal)
    period = models.ForeignKey(AccountPeriod)
    narration = models.TextField(blank=True)
    date = models.DateField()
    balance = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    partner_id = models.IntegerField(null=True, blank=True)
    to_check = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'account_move'

class AccountJournalPeriod(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64)
    state = models.CharField(max_length=-1)
    company_id = models.IntegerField(null=True, blank=True)
    journal = models.ForeignKey(AccountJournal)
    period = models.ForeignKey(AccountPeriod)
    active = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'account_journal_period'

class AccountMoveReconcile(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64)
    opening_reconciliation = models.BooleanField(null=True, blank=True)
    type = models.CharField(max_length=16)
    class Meta:
        db_table = u'account_move_reconcile'

class AccountSubscription(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    model = models.ForeignKey(AccountModel)
    period_nbr = models.IntegerField()
    name = models.CharField(max_length=64)
    date_start = models.DateField()
    period_total = models.IntegerField()
    state = models.CharField(max_length=-1)
    period_type = models.CharField(max_length=-1)
    ref = models.CharField(max_length=16, blank=True)
    class Meta:
        db_table = u'account_subscription'

class AccountSubscriptionLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    date = models.DateField()
    subscription = models.ForeignKey(AccountSubscription)
    move = models.ForeignKey(AccountMove, null=True, blank=True)
    class Meta:
        db_table = u'account_subscription_line'

class AccountAddtmplWizard(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    cparent = models.ForeignKey(AccountAccount)
    class Meta:
        db_table = u'account_addtmpl_wizard'

class AccountFiscalPositionTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    note = models.TextField(blank=True)
    chart_template = models.ForeignKey(AccountChartTemplate)
    name = models.CharField(max_length=64)
    class Meta:
        db_table = u'account_fiscal_position_template'

class AccountAccountTemplateTaxRel(models.Model):
    account = models.ForeignKey(AccountAccountTemplate)
    tax = models.ForeignKey(AccountTaxTemplate)
    class Meta:
        db_table = u'account_account_template_tax_rel'

class AccountFiscalPositionAccountTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    position = models.ForeignKey(AccountFiscalPositionTemplate)
    account_dest = models.ForeignKey(AccountAccountTemplate)
    account_src = models.ForeignKey(AccountAccountTemplate)
    class Meta:
        db_table = u'account_fiscal_position_account_template'

class AccountFiscalPositionTaxTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    position = models.ForeignKey(AccountFiscalPositionTemplate)
    tax_dest = models.ForeignKey(AccountTaxTemplate, null=True, blank=True)
    tax_src = models.ForeignKey(AccountTaxTemplate)
    class Meta:
        db_table = u'account_fiscal_position_tax_template'

class AccountInstaller(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    date_stop = models.DateField()
    charts = models.CharField(max_length=-1)
    company = models.ForeignKey(ResCompany)
    date_start = models.DateField()
    period = models.CharField(max_length=-1)
    has_default_company = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'account_installer'

class AccountAnalyticCostLedgerJournalReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    date1 = models.DateField()
    date2 = models.DateField()
    class Meta:
        db_table = u'account_analytic_cost_ledger_journal_report'

class AccountAnalyticInvertedBalance(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    date1 = models.DateField()
    date2 = models.DateField()
    class Meta:
        db_table = u'account_analytic_inverted_balance'

class AccountAnalyticChart(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    from_date = models.DateField(null=True, blank=True)
    to_date = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'account_analytic_chart'

class AccountAnalyticBalance(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    date1 = models.DateField()
    date2 = models.DateField()
    empty_acc = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'account_analytic_balance'

class AccountAnalyticCostLedger(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    date1 = models.DateField()
    date2 = models.DateField()
    class Meta:
        db_table = u'account_analytic_cost_ledger'

class ProjectAccountAnalyticLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    from_date = models.DateField(null=True, blank=True)
    to_date = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'project_account_analytic_line'

class AccountCashboxLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    bank_statement = models.ForeignKey(AccountBankStatement, null=True, blank=True)
    number_opening = models.IntegerField(null=True, blank=True)
    number_closing = models.IntegerField(null=True, blank=True)
    pieces = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    class Meta:
        db_table = u'account_cashbox_line'

class AccountPartnerReconcileProcess(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    progress = models.FloatField(null=True, blank=True)
    today_reconciled = models.FloatField(null=True, blank=True)
    next_partner = models.ForeignKey(ResPartner, null=True, blank=True)
    to_reconcile = models.FloatField(null=True, blank=True)
    class Meta:
        db_table = u'account_partner_reconcile_process'

class AccountMoveLineReconcileSelect(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    account = models.ForeignKey(AccountAccount)
    class Meta:
        db_table = u'account_move_line_reconcile_select'

class AccountMoveLineReconcile(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    trans_nbr = models.IntegerField(null=True, blank=True)
    credit = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    writeoff = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    debit = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    class Meta:
        db_table = u'account_move_line_reconcile'

class AccountUnreconcile(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'account_unreconcile'

class AccountMoveLineUnreconcileSelect(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    account = models.ForeignKey(AccountAccount)
    class Meta:
        db_table = u'account_move_line_unreconcile_select'

class AccountMoveLineReconcileWriteoff(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    comment = models.CharField(max_length=64)
    analytic = models.ForeignKey(AccountAnalyticAccount, null=True, blank=True)
    writeoff_acc = models.ForeignKey(AccountAccount)
    journal = models.ForeignKey(AccountJournal)
    date_p = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'account_move_line_reconcile_writeoff'

class AccountUnreconcileReconcile(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'account_unreconcile_reconcile'

class AccountSubscriptionGenerate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    date = models.DateField()
    class Meta:
        db_table = u'account_subscription_generate'

class AccountJournalSelect(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'account_journal_select'

class AccountPeriodClose(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    sure = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'account_period_close'

class AccountMoveBankReconcile(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        db_table = u'account_move_bank_reconcile'

class AccountTaxChart(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    period = models.ForeignKey(AccountPeriod, null=True, blank=True)
    target_move = models.CharField(max_length=-1)
    class Meta:
        db_table = u'account_tax_chart'

class AccountOpenClosedFiscalyear(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    fyear = models.ForeignKey(AccountFiscalyear)
    class Meta:
        db_table = u'account_open_closed_fiscalyear'

class AccountInvoiceCancel(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'account_invoice_cancel'

class ValidateAccountMove(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    period = models.ForeignKey(AccountPeriod)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        db_table = u'validate_account_move'

class AccountInvoiceConfirm(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'account_invoice_confirm'

class AccountFiscalyearCloseState(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    fy = models.ForeignKey(AccountFiscalyear)
    class Meta:
        db_table = u'account_fiscalyear_close_state'

class AccountChart(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    period_from = models.ForeignKey(AccountPeriod, null=True, db_column='period_from', blank=True)
    period_to = models.ForeignKey(AccountPeriod, null=True, db_column='period_to', blank=True)
    target_move = models.CharField(max_length=-1)
    fiscalyear = models.ForeignKey(AccountFiscalyear, null=True, db_column='fiscalyear', blank=True)
    class Meta:
        db_table = u'account_chart'

class ValidateAccountMoveLines(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'validate_account_move_lines'

class AccountStateOpen(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'account_state_open'

class AnalyticEntriesReport(models.Model):
    id = models.IntegerField(null=True, blank=True)
    nbr = models.BigIntegerField(null=True, blank=True)
    date = models.DateField(null=True, blank=True)
    year = models.TextField(blank=True)
    month = models.TextField(blank=True)
    day = models.TextField(blank=True)
    user_id = models.IntegerField(null=True, blank=True)
    name = models.CharField(max_length=256, blank=True)
    partner_id = models.IntegerField(null=True, blank=True)
    company_id = models.IntegerField(null=True, blank=True)
    currency_id = models.IntegerField(null=True, blank=True)
    account_id = models.IntegerField(null=True, blank=True)
    general_account_id = models.IntegerField(null=True, blank=True)
    journal_id = models.IntegerField(null=True, blank=True)
    move_id = models.IntegerField(null=True, blank=True)
    product_id = models.IntegerField(null=True, blank=True)
    product_uom_id = models.IntegerField(null=True, blank=True)
    amount = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    unit_amount = models.FloatField(null=True, blank=True)
    class Meta:
        db_table = u'analytic_entries_report'

class AccountTreasuryReport(models.Model):
    id = models.IntegerField(null=True, blank=True)
    fiscalyear_id = models.IntegerField(null=True, blank=True)
    period_id = models.IntegerField(null=True, blank=True)
    debit = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    credit = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    balance = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    date = models.DateField(null=True, blank=True)
    company_id = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'account_treasury_report'

class CashBoxIn(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535)
    ref = models.CharField(max_length=32, blank=True)
    name = models.CharField(max_length=64)
    class Meta:
        db_table = u'cash_box_in'

class TempRange(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    name = models.CharField(max_length=64, blank=True)
    class Meta:
        db_table = u'temp_range'

class ReportAgedReceivable(models.Model):
    id = models.IntegerField(null=True, blank=True)
    name = models.CharField(max_length=64, blank=True)
    class Meta:
        db_table = u'report_aged_receivable'

class ReportInvoiceCreated(models.Model):
    id = models.IntegerField(null=True, blank=True)
    name = models.CharField(max_length=64, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    number = models.CharField(max_length=64, blank=True)
    partner_id = models.IntegerField(null=True, blank=True)
    amount_untaxed = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    amount_total = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    currency_id = models.IntegerField(null=True, blank=True)
    date_invoice = models.DateField(null=True, blank=True)
    date_due = models.DateField(null=True, blank=True)
    residual = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    origin = models.CharField(max_length=64, blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = u'report_invoice_created'

class CashBoxOut(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535)
    name = models.CharField(max_length=64)
    class Meta:
        db_table = u'cash_box_out'

class ReportAccountTypeSales(models.Model):
    id = models.IntegerField(null=True, blank=True)
    name = models.TextField(blank=True)
    month = models.TextField(blank=True)
    amount_total = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    currency_id = models.IntegerField(null=True, blank=True)
    period_id = models.IntegerField(null=True, blank=True)
    product_id = models.IntegerField(null=True, blank=True)
    quantity = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    user_type = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'report_account_type_sales'

class ReportAccountReceivable(models.Model):
    id = models.IntegerField(null=True, blank=True)
    name = models.TextField(blank=True)
    balance = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    debit = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    credit = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    class Meta:
        db_table = u'report_account_receivable'

class ReportAccountSales(models.Model):
    id = models.IntegerField(null=True, blank=True)
    name = models.TextField(blank=True)
    month = models.TextField(blank=True)
    amount_total = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    currency_id = models.IntegerField(null=True, blank=True)
    period_id = models.IntegerField(null=True, blank=True)
    product_id = models.IntegerField(null=True, blank=True)
    quantity = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    account_id = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'report_account_sales'

class AccountEntriesReport(models.Model):
    id = models.IntegerField(null=True, blank=True)
    date = models.DateField(null=True, blank=True)
    date_maturity = models.DateField(null=True, blank=True)
    date_created = models.DateField(null=True, blank=True)
    ref = models.CharField(max_length=64, blank=True)
    move_state = models.CharField(max_length=-1, blank=True)
    move_line_state = models.CharField(max_length=-1, blank=True)
    reconcile_id = models.IntegerField(null=True, blank=True)
    year = models.TextField(blank=True)
    month = models.TextField(blank=True)
    day = models.TextField(blank=True)
    partner_id = models.IntegerField(null=True, blank=True)
    product_id = models.IntegerField(null=True, blank=True)
    product_uom_id = models.IntegerField(null=True, blank=True)
    company_id = models.IntegerField(null=True, blank=True)
    journal_id = models.IntegerField(null=True, blank=True)
    fiscalyear_id = models.IntegerField(null=True, blank=True)
    period_id = models.IntegerField(null=True, blank=True)
    account_id = models.IntegerField(null=True, blank=True)
    analytic_account_id = models.IntegerField(null=True, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    user_type = models.IntegerField(null=True, blank=True)
    nbr = models.IntegerField(null=True, blank=True)
    quantity = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    currency_id = models.IntegerField(null=True, blank=True)
    amount_currency = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    debit = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    credit = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    balance = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    class Meta:
        db_table = u'account_entries_report'

class AccountChangeCurrency(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    currency = models.ForeignKey(ResCurrency)
    class Meta:
        db_table = u'account_change_currency'

class AccountSequenceFiscalyear(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    sequence = models.ForeignKey(IrSequence)
    fiscalyear = models.ForeignKey(AccountFiscalyear)
    sequence_main = models.ForeignKey(IrSequence)
    class Meta:
        db_table = u'account_sequence_fiscalyear'

class AccountAccountConsolRel(models.Model):
    child = models.ForeignKey(AccountAccount)
    parent = models.ForeignKey(AccountAccount)
    class Meta:
        db_table = u'account_account_consol_rel'

class AccountFiscalPositionTax(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    position = models.ForeignKey(AccountFiscalPosition)
    tax_dest = models.ForeignKey(AccountTax, null=True, blank=True)
    tax_src = models.ForeignKey(AccountTax)
    class Meta:
        db_table = u'account_fiscal_position_tax'

class AccountAccountType(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    close_method = models.CharField(max_length=-1)
    note = models.TextField(blank=True)
    code = models.CharField(max_length=32)
    name = models.CharField(max_length=64)
    report_type = models.CharField(max_length=-1)
    class Meta:
        db_table = u'account_account_type'

class AccountJournalGroupRel(models.Model):
    journal = models.ForeignKey(AccountJournal)
    group = models.ForeignKey(ResGroups)
    class Meta:
        db_table = u'account_journal_group_rel'

class AccountTaxCode(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    info = models.TextField(blank=True)
    code = models.CharField(max_length=64, blank=True)
    name = models.CharField(max_length=64)
    sequence = models.IntegerField(null=True, blank=True)
    company = models.ForeignKey(ResCompany)
    sign = models.FloatField()
    notprintable = models.BooleanField(null=True, blank=True)
    parent = models.ForeignKey('self', null=True, blank=True)
    class Meta:
        db_table = u'account_tax_code'

class AccountFiscalPositionAccount(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    position = models.ForeignKey(AccountFiscalPosition)
    account_dest = models.ForeignKey(AccountAccount)
    account_src = models.ForeignKey(AccountAccount)
    class Meta:
        db_table = u'account_fiscal_position_account'

class AccountFinancialReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    parent = models.ForeignKey('self', null=True, blank=True)
    name = models.CharField(max_length=128)
    sequence = models.IntegerField(null=True, blank=True)
    level = models.IntegerField(null=True, blank=True)
    style_overwrite = models.IntegerField(null=True, blank=True)
    sign = models.IntegerField()
    account_report = models.ForeignKey('self', null=True, blank=True)
    display_detail = models.CharField(max_length=-1, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    class Meta:
        db_table = u'account_financial_report'

class AccountAccountTaxDefaultRel(models.Model):
    account = models.ForeignKey(AccountAccount)
    tax = models.ForeignKey(AccountTax)
    class Meta:
        db_table = u'account_account_tax_default_rel'

class AccountAccountTypeRel(models.Model):
    journal = models.ForeignKey(AccountJournal)
    account = models.ForeignKey(AccountAccount)
    class Meta:
        db_table = u'account_account_type_rel'

class AccountTax(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    ref_base_code = models.ForeignKey(AccountTaxCode, null=True, blank=True)
    domain = models.CharField(max_length=32, blank=True)
    description = models.CharField(max_length=-1, blank=True)
    ref_tax_code = models.ForeignKey(AccountTaxCode, null=True, blank=True)
    sequence = models.IntegerField()
    account_paid = models.ForeignKey(AccountAccount, null=True, blank=True)
    ref_base_sign = models.FloatField(null=True, blank=True)
    type_tax_use = models.CharField(max_length=-1)
    base_code = models.ForeignKey(AccountTaxCode, null=True, blank=True)
    base_sign = models.FloatField(null=True, blank=True)
    child_depend = models.BooleanField(null=True, blank=True)
    include_base_amount = models.BooleanField(null=True, blank=True)
    account_analytic_collected = models.ForeignKey(AccountAnalyticAccount, null=True, blank=True)
    account_analytic_paid = models.ForeignKey(AccountAnalyticAccount, null=True, blank=True)
    active = models.BooleanField(null=True, blank=True)
    ref_tax_sign = models.FloatField(null=True, blank=True)
    applicable_type = models.CharField(max_length=-1)
    account_collected = models.ForeignKey(AccountAccount, null=True, blank=True)
    company = models.ForeignKey(ResCompany)
    name = models.CharField(max_length=64)
    tax_code = models.ForeignKey(AccountTaxCode, null=True, blank=True)
    parent = models.ForeignKey('self', null=True, blank=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535)
    python_compute = models.TextField(blank=True)
    tax_sign = models.FloatField(null=True, blank=True)
    python_compute_inv = models.TextField(blank=True)
    python_applicable = models.TextField(blank=True)
    type = models.CharField(max_length=-1)
    price_include = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'account_tax'

class AccountConfigSettings(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    date_stop = models.DateField()
    sale_journal = models.ForeignKey(AccountJournal, null=True, blank=True)
    module_account_voucher = models.BooleanField(null=True, blank=True)
    module_account_asset = models.BooleanField(null=True, blank=True)
    period = models.CharField(max_length=-1)
    module_account_accountant = models.BooleanField(null=True, blank=True)
    module_account_followup = models.BooleanField(null=True, blank=True)
    purchase_journal = models.ForeignKey(AccountJournal, null=True, blank=True)
    has_chart_of_accounts = models.BooleanField(null=True, blank=True)
    sale_refund_journal = models.ForeignKey(AccountJournal, null=True, blank=True)
    complete_tax_set = models.BooleanField(null=True, blank=True)
    module_account_budget = models.BooleanField(null=True, blank=True)
    date_start = models.DateField()
    purchase_refund_journal = models.ForeignKey(AccountJournal, null=True, blank=True)
    company = models.ForeignKey(ResCompany)
    sale_tax_rate = models.FloatField(null=True, blank=True)
    group_check_supplier_invoice_total = models.BooleanField(null=True, blank=True)
    module_account_check_writing = models.BooleanField(null=True, blank=True)
    default_purchase_tax = models.ForeignKey(AccountTax, null=True, db_column='default_purchase_tax', blank=True)
    has_default_company = models.BooleanField(null=True, blank=True)
    purchase_tax_rate = models.FloatField(null=True, blank=True)
    default_sale_tax = models.ForeignKey(AccountTax, null=True, db_column='default_sale_tax', blank=True)
    has_fiscal_year = models.BooleanField(null=True, blank=True)
    module_account_payment = models.BooleanField(null=True, blank=True)
    sale_tax = models.ForeignKey(AccountTaxTemplate, null=True, db_column='sale_tax', blank=True)
    group_multi_currency = models.BooleanField(null=True, blank=True)
    purchase_tax = models.ForeignKey(AccountTaxTemplate, null=True, db_column='purchase_tax', blank=True)
    group_proforma_invoices = models.BooleanField(null=True, blank=True)
    decimal_precision = models.IntegerField(null=True, blank=True)
    code_digits = models.IntegerField(null=True, blank=True)
    chart_template = models.ForeignKey(AccountChartTemplate, null=True, blank=True)
    group_analytic_accounting = models.BooleanField(null=True, blank=True)
    group_analytic_account_for_sales = models.BooleanField(null=True, blank=True)
    module_sale_analytic_plans = models.BooleanField(null=True, blank=True)
    group_payment_options = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'account_config_settings'

class AccountFiscalPosition(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    note = models.TextField(blank=True)
    name = models.CharField(max_length=64)
    active = models.BooleanField(null=True, blank=True)
    company = models.ForeignKey(ResCompany, null=True, blank=True)
    class Meta:
        db_table = u'account_fiscal_position'

class AccountJournalTypeRel(models.Model):
    journal = models.ForeignKey(AccountJournal)
    type = models.ForeignKey(AccountAccountType)
    class Meta:
        db_table = u'account_journal_type_rel'

class AccountAnalyticJournal(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    code = models.CharField(max_length=8, blank=True)
    name = models.CharField(max_length=64)
    active = models.BooleanField(null=True, blank=True)
    type = models.CharField(max_length=32)
    company = models.ForeignKey(ResCompany)
    class Meta:
        db_table = u'account_analytic_journal'

class AccountTemplateFinancialReport(models.Model):
    account_template = models.ForeignKey(AccountAccountTemplate)
    report_line = models.ForeignKey(AccountFinancialReport)
    class Meta:
        db_table = u'account_template_financial_report'

class AccountJournal(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    default_debit_account = models.ForeignKey(AccountAccount, null=True, blank=True)
    code = models.CharField(max_length=5)
    default_credit_account = models.ForeignKey(AccountAccount, null=True, blank=True)
    loss_account = models.ForeignKey(AccountAccount, null=True, blank=True)
    currency = models.ForeignKey(ResCurrency, null=True, db_column='currency', blank=True)
    internal_account = models.ForeignKey(AccountAccount, null=True, blank=True)
    allow_date = models.BooleanField(null=True, blank=True)
    sequence = models.ForeignKey(IrSequence)
    update_posted = models.BooleanField(null=True, blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    name = models.CharField(max_length=64)
    cash_control = models.BooleanField(null=True, blank=True)
    centralisation = models.BooleanField(null=True, blank=True)
    group_invoice_lines = models.BooleanField(null=True, blank=True)
    with_last_closing_balance = models.BooleanField(null=True, blank=True)
    company = models.ForeignKey(ResCompany)
    analytic_journal = models.ForeignKey(AccountAnalyticJournal, null=True, blank=True)
    profit_account = models.ForeignKey(AccountAccount, null=True, blank=True)
    entry_posted = models.BooleanField(null=True, blank=True)
    type = models.CharField(max_length=32)
    class Meta:
        db_table = u'account_journal'

class AccountTaxTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    ref_base_code = models.ForeignKey(AccountTaxCodeTemplate, null=True, blank=True)
    domain = models.CharField(max_length=32, blank=True)
    description = models.CharField(max_length=-1, blank=True)
    ref_tax_code = models.ForeignKey(AccountTaxCodeTemplate, null=True, blank=True)
    sequence = models.IntegerField()
    ref_base_sign = models.FloatField(null=True, blank=True)
    type_tax_use = models.CharField(max_length=-1)
    base_code = models.ForeignKey(AccountTaxCodeTemplate, null=True, blank=True)
    base_sign = models.FloatField(null=True, blank=True)
    child_depend = models.BooleanField(null=True, blank=True)
    include_base_amount = models.BooleanField(null=True, blank=True)
    applicable_type = models.CharField(max_length=-1)
    ref_tax_sign = models.FloatField(null=True, blank=True)
    account_paid = models.ForeignKey(AccountAccountTemplate, null=True, blank=True)
    account_collected = models.ForeignKey(AccountAccountTemplate, null=True, blank=True)
    chart_template = models.ForeignKey(AccountChartTemplate)
    name = models.CharField(max_length=64)
    tax_code = models.ForeignKey(AccountTaxCodeTemplate, null=True, blank=True)
    parent = models.ForeignKey('self', null=True, blank=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535)
    python_compute = models.TextField(blank=True)
    tax_sign = models.FloatField(null=True, blank=True)
    python_compute_inv = models.TextField(blank=True)
    python_applicable = models.TextField(blank=True)
    type = models.CharField(max_length=-1)
    price_include = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'account_tax_template'

class AccountTaxCodeTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    info = models.TextField(blank=True)
    notprintable = models.BooleanField(null=True, blank=True)
    code = models.CharField(max_length=64, blank=True)
    name = models.CharField(max_length=64)
    parent = models.ForeignKey('self', null=True, blank=True)
    sign = models.FloatField()
    class Meta:
        db_table = u'account_tax_code_template'

class AccountPeriod(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    date_stop = models.DateField()
    code = models.CharField(max_length=12, blank=True)
    name = models.CharField(max_length=64)
    date_start = models.DateField()
    fiscalyear = models.ForeignKey(AccountFiscalyear)
    company_id = models.IntegerField(null=True, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    special = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'account_period'

class AccountFiscalyear(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    date_stop = models.DateField()
    code = models.CharField(max_length=6)
    name = models.CharField(max_length=64)
    end_journal_period = models.ForeignKey(AccountJournalPeriod, null=True, blank=True)
    date_start = models.DateField()
    company = models.ForeignKey(ResCompany)
    state = models.CharField(max_length=-1, blank=True)
    class Meta:
        db_table = u'account_fiscalyear'

class AccountModelLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    analytic_account = models.ForeignKey(AccountAnalyticAccount, null=True, blank=True)
    model = models.ForeignKey(AccountModel)
    account = models.ForeignKey(AccountAccount)
    sequence = models.IntegerField()
    currency = models.ForeignKey(ResCurrency, null=True, blank=True)
    credit = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    date_maturity = models.CharField(max_length=-1, blank=True)
    debit = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    amount_currency = models.FloatField(null=True, blank=True)
    quantity = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    partner = models.ForeignKey(ResPartner, null=True, blank=True)
    name = models.CharField(max_length=64)
    class Meta:
        db_table = u'account_model_line'

class AccountAccount(models.Model):
    id = models.IntegerField(primary_key=True)
    parent_left = models.IntegerField(null=True, blank=True)
    parent_right = models.IntegerField(null=True, blank=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    code = models.CharField(max_length=64)
    reconcile = models.BooleanField(null=True, blank=True)
    currency = models.ForeignKey(ResCurrency, null=True, blank=True)
    user_type = models.ForeignKey(AccountAccountType, db_column='user_type')
    active = models.BooleanField(null=True, blank=True)
    name = models.CharField(max_length=256)
    level = models.IntegerField(null=True, blank=True)
    company = models.ForeignKey(ResCompany)
    shortcut = models.CharField(max_length=12, blank=True)
    note = models.TextField(blank=True)
    parent = models.ForeignKey('self', null=True, blank=True)
    currency_mode = models.CharField(max_length=-1)
    type = models.CharField(max_length=-1)
    class Meta:
        db_table = u'account_account'

class AccountModel(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    journal = models.ForeignKey(AccountJournal)
    company_id = models.IntegerField(null=True, blank=True)
    name = models.CharField(max_length=64)
    legend = models.TextField(blank=True)
    class Meta:
        db_table = u'account_model'

class AccountJournalCashboxLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    journal = models.ForeignKey(AccountJournal)
    pieces = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    class Meta:
        db_table = u'account_journal_cashbox_line'

class AccountAccountFinancialReportType(models.Model):
    report = models.ForeignKey(AccountFinancialReport)
    account_type = models.ForeignKey(AccountAccountType)
    class Meta:
        db_table = u'account_account_financial_report_type'

class AccountCommonJournalReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    chart_account = models.ForeignKey(AccountAccount)
    date_from = models.DateField(null=True, blank=True)
    period_to = models.ForeignKey(AccountPeriod, null=True, db_column='period_to', blank=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, null=True, db_column='period_from', blank=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, null=True, blank=True)
    date_to = models.DateField(null=True, blank=True)
    amount_currency = models.BooleanField(null=True, blank=True)
    target_move = models.CharField(max_length=-1)
    class Meta:
        db_table = u'account_common_journal_report'

class AccountAutomaticReconcile(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    power = models.IntegerField()
    max_amount = models.FloatField(null=True, blank=True)
    reconciled = models.IntegerField(null=True, blank=True)
    unreconciled = models.IntegerField(null=True, blank=True)
    allow_write_off = models.BooleanField(null=True, blank=True)
    writeoff_acc = models.ForeignKey(AccountAccount, null=True, blank=True)
    journal = models.ForeignKey(AccountJournal, null=True, blank=True)
    period = models.ForeignKey(AccountPeriod, null=True, blank=True)
    class Meta:
        db_table = u'account_automatic_reconcile'

class AccountCommonJournalReportAccountJournalRel(models.Model):
    account_common_journal_report = models.ForeignKey(AccountCommonJournalReport)
    account_journal = models.ForeignKey(AccountJournal)
    class Meta:
        db_table = u'account_common_journal_report_account_journal_rel'

class AccountCommonReportAccountJournalRel(models.Model):
    account_common_report = models.ForeignKey(AccountCommonReport)
    account_journal = models.ForeignKey(AccountJournal)
    class Meta:
        db_table = u'account_common_report_account_journal_rel'

class AccountAccountTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    note = models.TextField(blank=True)
    code = models.CharField(max_length=64)
    reconcile = models.BooleanField(null=True, blank=True)
    user_type = models.ForeignKey(AccountAccountType, db_column='user_type')
    shortcut = models.CharField(max_length=12, blank=True)
    currency = models.ForeignKey(ResCurrency, null=True, blank=True)
    parent = models.ForeignKey('self', null=True, blank=True)
    nocreate = models.BooleanField(null=True, blank=True)
    type = models.CharField(max_length=-1)
    chart_template = models.ForeignKey(AccountChartTemplate, null=True, blank=True)
    name = models.CharField(max_length=256)
    class Meta:
        db_table = u'account_account_template'

class AccountCommonAccountReportAccountJournalRel(models.Model):
    account_common_account_report = models.ForeignKey(AccountCommonAccountReport)
    account_journal = models.ForeignKey(AccountJournal)
    class Meta:
        db_table = u'account_common_account_report_account_journal_rel'

class AccountCommonReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    chart_account = models.ForeignKey(AccountAccount)
    date_from = models.DateField(null=True, blank=True)
    period_to = models.ForeignKey(AccountPeriod, null=True, db_column='period_to', blank=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, null=True, db_column='period_from', blank=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, null=True, blank=True)
    date_to = models.DateField(null=True, blank=True)
    target_move = models.CharField(max_length=-1)
    class Meta:
        db_table = u'account_common_report'

class WizardMultiChartsAccounts(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    only_one_chart_template = models.BooleanField(null=True, blank=True)
    purchase_tax_rate = models.FloatField(null=True, blank=True)
    complete_tax_set = models.BooleanField(null=True, blank=True)
    code_digits = models.IntegerField()
    chart_template = models.ForeignKey(AccountChartTemplate)
    sale_tax = models.ForeignKey(AccountTaxTemplate, null=True, db_column='sale_tax', blank=True)
    company = models.ForeignKey(ResCompany)
    purchase_tax = models.ForeignKey(AccountTaxTemplate, null=True, db_column='purchase_tax', blank=True)
    currency = models.ForeignKey(ResCurrency, null=True, blank=True)
    sale_tax_rate = models.FloatField(null=True, blank=True)
    class Meta:
        db_table = u'wizard_multi_charts_accounts'

class AccountBankAccountsWizard(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    currency = models.ForeignKey(ResCurrency, null=True, blank=True)
    acc_name = models.CharField(max_length=64)
    account_type = models.CharField(max_length=32, blank=True)
    bank_account = models.ForeignKey(WizardMultiChartsAccounts)
    class Meta:
        db_table = u'account_bank_accounts_wizard'

class AccountAnalyticJournalReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    date1 = models.DateField()
    date2 = models.DateField()
    class Meta:
        db_table = u'account_analytic_journal_report'

class AccountAnalyticJournalName(models.Model):
    journal_line = models.ForeignKey(AccountAnalyticJournalReport)
    journal_print = models.ForeignKey(AccountAnalyticJournal)
    class Meta:
        db_table = u'account_analytic_journal_name'

class LedgerJournalRel(models.Model):
    ledger = models.ForeignKey(AccountAnalyticCostLedgerJournalReport)
    journal = models.ForeignKey(AccountAnalyticJournal)
    class Meta:
        db_table = u'ledger_journal_rel'

class AccountInvoiceTax(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    tax_amount = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    account = models.ForeignKey(AccountAccount)
    sequence = models.IntegerField(null=True, blank=True)
    invoice = models.ForeignKey(AccountInvoice, null=True, blank=True)
    manual = models.BooleanField(null=True, blank=True)
    company_id = models.IntegerField(null=True, blank=True)
    base_amount = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    amount = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    base = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    tax_code = models.ForeignKey(AccountTaxCode, null=True, blank=True)
    account_analytic = models.ForeignKey(AccountAnalyticAccount, null=True, blank=True)
    base_code = models.ForeignKey(AccountTaxCode, null=True, blank=True)
    name = models.CharField(max_length=64)
    class Meta:
        db_table = u'account_invoice_tax'

class AccountInvoiceRefund(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    date = models.DateField(null=True, blank=True)
    journal = models.ForeignKey(AccountJournal, null=True, blank=True)
    filter_refund = models.CharField(max_length=-1)
    description = models.CharField(max_length=128)
    period = models.ForeignKey(AccountPeriod, null=True, db_column='period', blank=True)
    class Meta:
        db_table = u'account_invoice_refund'

class AccountCommonPartnerReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    chart_account = models.ForeignKey(AccountAccount)
    period_to = models.ForeignKey(AccountPeriod, null=True, db_column='period_to', blank=True)
    date_from = models.DateField(null=True, blank=True)
    result_selection = models.CharField(max_length=-1)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, null=True, db_column='period_from', blank=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, null=True, blank=True)
    date_to = models.DateField(null=True, blank=True)
    target_move = models.CharField(max_length=-1)
    class Meta:
        db_table = u'account_common_partner_report'

class AccountPartnerBalance(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    display_partner = models.CharField(max_length=-1, blank=True)
    chart_account = models.ForeignKey(AccountAccount)
    period_to = models.ForeignKey(AccountPeriod, null=True, db_column='period_to', blank=True)
    date_from = models.DateField(null=True, blank=True)
    result_selection = models.CharField(max_length=-1)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, null=True, db_column='period_from', blank=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, null=True, blank=True)
    date_to = models.DateField(null=True, blank=True)
    target_move = models.CharField(max_length=-1)
    class Meta:
        db_table = u'account_partner_balance'

class AccountBankStatementLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    analytic_account = models.ForeignKey(AccountAnalyticAccount, null=True, blank=True)
    ref = models.CharField(max_length=32, blank=True)
    statement = models.ForeignKey(AccountBankStatement)
    sequence = models.IntegerField(null=True, blank=True)
    type = models.CharField(max_length=-1)
    company_id = models.IntegerField(null=True, blank=True)
    name = models.CharField(max_length=-1)
    note = models.TextField(blank=True)
    journal_id = models.IntegerField(null=True, blank=True)
    amount = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    date = models.DateField()
    partner = models.ForeignKey(ResPartner, null=True, blank=True)
    account = models.ForeignKey(AccountAccount)
    voucher = models.ForeignKey(AccountVoucher, null=True, blank=True)
    class Meta:
        db_table = u'account_bank_statement_line'

class AccountCommonPartnerReportAccountJournalRel(models.Model):
    account_common_partner_report = models.ForeignKey(AccountCommonPartnerReport)
    account_journal = models.ForeignKey(AccountJournal)
    class Meta:
        db_table = u'account_common_partner_report_account_journal_rel'

class AccountBankStatementLineMoveRel(models.Model):
    statement_line = models.ForeignKey(AccountBankStatementLine)
    move = models.ForeignKey(AccountMove)
    class Meta:
        db_table = u'account_bank_statement_line_move_rel'

class AccountBankStatement(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    balance_start = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    journal = models.ForeignKey(AccountJournal)
    period = models.ForeignKey(AccountPeriod)
    total_entry_encoding = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    date = models.DateField()
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    name = models.CharField(max_length=64)
    closing_date = models.DateTimeField(null=True, blank=True)
    balance_end = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    company_id = models.IntegerField(null=True, blank=True)
    state = models.CharField(max_length=-1)
    balance_end_real = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    class Meta:
        db_table = u'account_bank_statement'

class AccountInvoiceLineTax(models.Model):
    invoice_line = models.ForeignKey(AccountInvoiceLine)
    tax = models.ForeignKey(AccountTax)
    class Meta:
        db_table = u'account_invoice_line_tax'

class AccountAgedTrialBalanceJournalRel(models.Model):
    account = models.ForeignKey(AccountAgedTrialBalance)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        db_table = u'account_aged_trial_balance_journal_rel'

class AccountPartnerLedgerJournalRel(models.Model):
    account = models.ForeignKey(AccountPartnerLedger)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        db_table = u'account_partner_ledger_journal_rel'

class AccountCommonAccountReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    chart_account = models.ForeignKey(AccountAccount)
    date_from = models.DateField(null=True, blank=True)
    period_to = models.ForeignKey(AccountPeriod, null=True, db_column='period_to', blank=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, null=True, db_column='period_from', blank=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, null=True, blank=True)
    date_to = models.DateField(null=True, blank=True)
    display_account = models.CharField(max_length=-1)
    target_move = models.CharField(max_length=-1)
    class Meta:
        db_table = u'account_common_account_report'

class AccountInvoice(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    origin = models.CharField(max_length=64, blank=True)
    date_due = models.DateField(null=True, blank=True)
    check_total = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    reference = models.CharField(max_length=64, blank=True)
    supplier_invoice_number = models.CharField(max_length=64, blank=True)
    number = models.CharField(max_length=64, blank=True)
    account = models.ForeignKey(AccountAccount)
    company = models.ForeignKey(ResCompany)
    currency = models.ForeignKey(ResCurrency)
    partner = models.ForeignKey(ResPartner)
    fiscal_position = models.ForeignKey(AccountFiscalPosition, null=True, db_column='fiscal_position', blank=True)
    user = models.ForeignKey(ResUsers, null=True, blank=True)
    partner_bank = models.ForeignKey(ResPartnerBank, null=True, blank=True)
    payment_term = models.ForeignKey(AccountPaymentTerm, null=True, db_column='payment_term', blank=True)
    reference_type = models.CharField(max_length=-1)
    journal = models.ForeignKey(AccountJournal)
    amount_tax = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    type = models.CharField(max_length=-1, blank=True)
    internal_number = models.CharField(max_length=32, blank=True)
    reconciled = models.BooleanField(null=True, blank=True)
    residual = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    move_name = models.CharField(max_length=64, blank=True)
    date_invoice = models.DateField(null=True, blank=True)
    period = models.ForeignKey(AccountPeriod, null=True, blank=True)
    amount_untaxed = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    move = models.ForeignKey(AccountMove, null=True, blank=True)
    amount_total = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    name = models.CharField(max_length=64, blank=True)
    comment = models.TextField(blank=True)
    sent = models.BooleanField(null=True, blank=True)
    commercial_partner_id = models.IntegerField(null=True, blank=True)
    section = models.ForeignKey(CrmCaseSection, null=True, blank=True)
    class Meta:
        db_table = u'account_invoice'

class AccountPartnerLedger(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    initial_balance = models.BooleanField(null=True, blank=True)
    chart_account = models.ForeignKey(AccountAccount)
    period_to = models.ForeignKey(AccountPeriod, null=True, db_column='period_to', blank=True)
    date_from = models.DateField(null=True, blank=True)
    result_selection = models.CharField(max_length=-1)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, null=True, db_column='period_from', blank=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, null=True, blank=True)
    page_split = models.BooleanField(null=True, blank=True)
    date_to = models.DateField(null=True, blank=True)
    amount_currency = models.BooleanField(null=True, blank=True)
    target_move = models.CharField(max_length=-1)
    class Meta:
        db_table = u'account_partner_ledger'

class ReconcileAccountRel(models.Model):
    reconcile = models.ForeignKey(AccountAutomaticReconcile)
    account = models.ForeignKey(AccountAccount)
    class Meta:
        db_table = u'reconcile_account_rel'

class AccountAgedTrialBalance(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    chart_account = models.ForeignKey(AccountAccount)
    period_length = models.IntegerField()
    period_to = models.ForeignKey(AccountPeriod, null=True, db_column='period_to', blank=True)
    date_from = models.DateField(null=True, blank=True)
    date_to = models.DateField(null=True, blank=True)
    result_selection = models.CharField(max_length=-1)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, null=True, db_column='period_from', blank=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, null=True, blank=True)
    direction_selection = models.CharField(max_length=-1)
    target_move = models.CharField(max_length=-1)
    class Meta:
        db_table = u'account_aged_trial_balance'

class AccountPartnerBalanceJournalRel(models.Model):
    account = models.ForeignKey(AccountPartnerBalance)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        db_table = u'account_partner_balance_journal_rel'

class AccountMoveLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    statement = models.ForeignKey(AccountBankStatement, null=True, blank=True)
    journal_id = models.IntegerField()
    currency = models.ForeignKey(ResCurrency, null=True, blank=True)
    date_maturity = models.DateField(null=True, blank=True)
    partner = models.ForeignKey(ResPartner, null=True, blank=True)
    reconcile_partial = models.ForeignKey(AccountMoveReconcile, null=True, blank=True)
    analytic_account = models.ForeignKey(AccountAnalyticAccount, null=True, blank=True)
    credit = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    centralisation = models.CharField(max_length=8, blank=True)
    company_id = models.IntegerField(null=True, blank=True)
    tax_code = models.ForeignKey(AccountTaxCode, null=True, blank=True)
    state = models.CharField(max_length=-1, blank=True)
    debit = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    blocked = models.BooleanField(null=True, blank=True)
    ref = models.CharField(max_length=64, blank=True)
    account = models.ForeignKey(AccountAccount)
    period_id = models.IntegerField()
    date_created = models.DateField(null=True, blank=True)
    date = models.DateField()
    move = models.ForeignKey(AccountMove)
    name = models.CharField(max_length=64)
    reconcile = models.ForeignKey(AccountMoveReconcile, null=True, blank=True)
    tax_amount = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    product = models.ForeignKey(ProductProduct, null=True, blank=True)
    account_tax = models.ForeignKey(AccountTax, null=True, blank=True)
    product_uom = models.ForeignKey(ProductUom, null=True, blank=True)
    amount_currency = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    quantity = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    class Meta:
        db_table = u'account_move_line'

class AccountJournalAccountVatDeclarationRel(models.Model):
    account_vat_declaration = models.ForeignKey(AccountVatDeclaration)
    account_journal = models.ForeignKey(AccountJournal)
    class Meta:
        db_table = u'account_journal_account_vat_declaration_rel'

class AccountFiscalyearClose(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    fy = models.ForeignKey(AccountFiscalyear)
    fy2 = models.ForeignKey(AccountFiscalyear)
    period = models.ForeignKey(AccountPeriod)
    journal = models.ForeignKey(AccountJournal)
    report_name = models.CharField(max_length=64)
    class Meta:
        db_table = u'account_fiscalyear_close'

class AccountInvoiceLine(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    origin = models.CharField(max_length=256, blank=True)
    uos = models.ForeignKey(ProductUom, null=True, blank=True)
    account = models.ForeignKey(AccountAccount)
    name = models.TextField()
    sequence = models.IntegerField(null=True, blank=True)
    invoice = models.ForeignKey(AccountInvoice, null=True, blank=True)
    price_unit = models.DecimalField(max_digits=65535, decimal_places=65535)
    price_subtotal = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    company_id = models.IntegerField(null=True, blank=True)
    discount = models.DecimalField(null=True, max_digits=65535, decimal_places=65535, blank=True)
    account_analytic = models.ForeignKey(AccountAnalyticAccount, null=True, blank=True)
    quantity = models.DecimalField(max_digits=65535, decimal_places=65535)
    partner_id = models.IntegerField(null=True, blank=True)
    product = models.ForeignKey(ProductProduct, null=True, blank=True)
    class Meta:
        db_table = u'account_invoice_line'

class AccountChartTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    property_account_expense_categ = models.ForeignKey(AccountAccountTemplate, null=True, db_column='property_account_expense_categ', blank=True)
    property_account_income_opening = models.ForeignKey(AccountAccountTemplate, null=True, db_column='property_account_income_opening', blank=True)
    property_account_expense_opening = models.ForeignKey(AccountAccountTemplate, null=True, db_column='property_account_expense_opening', blank=True)
    visible = models.BooleanField(null=True, blank=True)
    tax_code_root = models.ForeignKey(AccountTaxCodeTemplate, null=True, blank=True)
    property_account_income_categ = models.ForeignKey(AccountAccountTemplate, null=True, db_column='property_account_income_categ', blank=True)
    property_account_income = models.ForeignKey(AccountAccountTemplate, null=True, db_column='property_account_income', blank=True)
    complete_tax_set = models.BooleanField(null=True, blank=True)
    code_digits = models.IntegerField()
    name = models.CharField(max_length=64)
    property_account_expense = models.ForeignKey(AccountAccountTemplate, null=True, db_column='property_account_expense', blank=True)
    property_account_receivable = models.ForeignKey(AccountAccountTemplate, null=True, db_column='property_account_receivable', blank=True)
    property_account_payable = models.ForeignKey(AccountAccountTemplate, null=True, db_column='property_account_payable', blank=True)
    parent = models.ForeignKey('self', null=True, blank=True)
    bank_account_view = models.ForeignKey(AccountAccountTemplate, null=True, blank=True)
    account_root = models.ForeignKey(AccountAccountTemplate, null=True, blank=True)
    class Meta:
        db_table = u'account_chart_template'

class AccountVatDeclaration(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    chart_account = models.ForeignKey(AccountAccount)
    date_from = models.DateField(null=True, blank=True)
    date_to = models.DateField(null=True, blank=True)
    period_to = models.ForeignKey(AccountPeriod, null=True, db_column='period_to', blank=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, null=True, db_column='period_from', blank=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, null=True, blank=True)
    based_on = models.CharField(max_length=-1)
    display_detail = models.BooleanField(null=True, blank=True)
    chart_tax = models.ForeignKey(AccountTaxCode)
    target_move = models.CharField(max_length=-1)
    class Meta:
        db_table = u'account_vat_declaration'

class AccountJournalAccountingReportRel(models.Model):
    accounting_report = models.ForeignKey(AccountingReport)
    account_journal = models.ForeignKey(AccountJournal)
    class Meta:
        db_table = u'account_journal_accounting_report_rel'

class AccountingReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    period_to_cmp = models.ForeignKey(AccountPeriod, null=True, db_column='period_to_cmp', blank=True)
    chart_account = models.ForeignKey(AccountAccount)
    period_from_cmp = models.ForeignKey(AccountPeriod, null=True, db_column='period_from_cmp', blank=True)
    filter_cmp = models.CharField(max_length=-1)
    enable_filter = models.BooleanField(null=True, blank=True)
    period_to = models.ForeignKey(AccountPeriod, null=True, db_column='period_to', blank=True)
    date_to_cmp = models.DateField(null=True, blank=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, null=True, blank=True)
    date_to = models.DateField(null=True, blank=True)
    account_report = models.ForeignKey(AccountFinancialReport)
    fiscalyear_id_cmp = models.ForeignKey(AccountFiscalyear, null=True, db_column='fiscalyear_id_cmp', blank=True)
    date_from = models.DateField(null=True, blank=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, null=True, db_column='period_from', blank=True)
    label_filter = models.CharField(max_length=32, blank=True)
    date_from_cmp = models.DateField(null=True, blank=True)
    debit_credit = models.BooleanField(null=True, blank=True)
    target_move = models.CharField(max_length=-1)
    class Meta:
        db_table = u'accounting_report'

class AccountUseModel(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    class Meta:
        db_table = u'account_use_model'

class AccountUseModelRelation(models.Model):
    account = models.ForeignKey(AccountUseModel)
    model = models.ForeignKey(AccountModel)
    class Meta:
        db_table = u'account_use_model_relation'

class AccountBalanceReport(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    chart_account = models.ForeignKey(AccountAccount)
    date_from = models.DateField(null=True, blank=True)
    period_to = models.ForeignKey(AccountPeriod, null=True, db_column='period_to', blank=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, null=True, db_column='period_from', blank=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, null=True, blank=True)
    date_to = models.DateField(null=True, blank=True)
    display_account = models.CharField(max_length=-1)
    target_move = models.CharField(max_length=-1)
    class Meta:
        db_table = u'account_balance_report'

class ProductTaxesRel(models.Model):
    prod = models.ForeignKey(ProductTemplate)
    tax = models.ForeignKey(AccountTax)
    class Meta:
        db_table = u'product_taxes_rel'

class AccountPrintJournalJournalRel(models.Model):
    account = models.ForeignKey(AccountPrintJournal)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        db_table = u'account_print_journal_journal_rel'

class ProductSupplierTaxesRel(models.Model):
    prod = models.ForeignKey(ProductTemplate)
    tax = models.ForeignKey(AccountTax)
    class Meta:
        db_table = u'product_supplier_taxes_rel'

class AccountPrintJournal(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    chart_account = models.ForeignKey(AccountAccount)
    sort_selection = models.CharField(max_length=-1)
    date_from = models.DateField(null=True, blank=True)
    period_to = models.ForeignKey(AccountPeriod, null=True, db_column='period_to', blank=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, null=True, db_column='period_from', blank=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, null=True, blank=True)
    date_to = models.DateField(null=True, blank=True)
    amount_currency = models.BooleanField(null=True, blank=True)
    target_move = models.CharField(max_length=-1)
    class Meta:
        db_table = u'account_print_journal'

class AccountCentralJournalJournalRel(models.Model):
    account = models.ForeignKey(AccountCentralJournal)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        db_table = u'account_central_journal_journal_rel'

class AccountCentralJournal(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    chart_account = models.ForeignKey(AccountAccount)
    date_from = models.DateField(null=True, blank=True)
    period_to = models.ForeignKey(AccountPeriod, null=True, db_column='period_to', blank=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, null=True, db_column='period_from', blank=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, null=True, blank=True)
    date_to = models.DateField(null=True, blank=True)
    amount_currency = models.BooleanField(null=True, blank=True)
    target_move = models.CharField(max_length=-1)
    class Meta:
        db_table = u'account_central_journal'

class AccountGeneralJournalJournalRel(models.Model):
    account = models.ForeignKey(AccountGeneralJournal)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        db_table = u'account_general_journal_journal_rel'

class AccountGeneralJournal(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    chart_account = models.ForeignKey(AccountAccount)
    date_from = models.DateField(null=True, blank=True)
    period_to = models.ForeignKey(AccountPeriod, null=True, db_column='period_to', blank=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, null=True, db_column='period_from', blank=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, null=True, blank=True)
    date_to = models.DateField(null=True, blank=True)
    amount_currency = models.BooleanField(null=True, blank=True)
    target_move = models.CharField(max_length=-1)
    class Meta:
        db_table = u'account_general_journal'

class AccountReportGeneralLedger(models.Model):
    id = models.IntegerField(primary_key=True)
    create_uid = models.ForeignKey(ResUsers, null=True, db_column='create_uid', blank=True)
    create_date = models.DateTimeField(null=True, blank=True)
    write_date = models.DateTimeField(null=True, blank=True)
    write_uid = models.ForeignKey(ResUsers, null=True, db_column='write_uid', blank=True)
    initial_balance = models.BooleanField(null=True, blank=True)
    chart_account = models.ForeignKey(AccountAccount)
    date_from = models.DateField(null=True, blank=True)
    period_to = models.ForeignKey(AccountPeriod, null=True, db_column='period_to', blank=True)
    filter = models.CharField(max_length=-1)
    period_from = models.ForeignKey(AccountPeriod, null=True, db_column='period_from', blank=True)
    fiscalyear = models.ForeignKey(AccountFiscalyear, null=True, blank=True)
    sortby = models.CharField(max_length=-1)
    target_move = models.CharField(max_length=-1)
    date_to = models.DateField(null=True, blank=True)
    amount_currency = models.BooleanField(null=True, blank=True)
    display_account = models.CharField(max_length=-1)
    landscape = models.BooleanField(null=True, blank=True)
    class Meta:
        db_table = u'account_report_general_ledger'

class AccountReportGeneralLedgerJournalRel(models.Model):
    account = models.ForeignKey(AccountReportGeneralLedger)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        db_table = u'account_report_general_ledger_journal_rel'

class AccountBalanceReportJournalRel(models.Model):
    account = models.ForeignKey(AccountBalanceReport)
    journal = models.ForeignKey(AccountJournal)
    class Meta:
        db_table = u'account_balance_report_journal_rel'
except NameError:
    namerror = True
    print "ok"
    continue

